{"version":3,"sources":["file:///Users/ruiwei/Documents/cocos/SudokuWechatGame/assets/scripts/logic/SudokuLogic.ts"],"names":["SudokuLogic","Constants","createEmptyBoardData","SudokuCore","constructor","core","initialize","console","log","getInstance","instance","convertStringToBoardData","boardString","solutionString","boardData","length","GRID_SIZE","error","r","c","index","char","grid","parseInt","presetMask","solution","solChar","convertBoardDataToString","num","toString","BLANK_CHAR","generateSudoku","difficulty","levelIndex","difficultyKey","key","Difficulty","typedKey","diffConfig","DifficultyEmptyCells","targetEmpty","Math","round","start","end","LEVELS_PER_DIFFICULTY","targetGivens","max","MIN_GIVENS","min","generate","solve","warn","undefined","isValidMove","row","col","boxStartRow","floor","BOX_SIZE","boxStartCol","isPartComplete","type","numbers","Set","count","has","add","size","isBoardComplete","i","getValidCandidates","candidates","push","solveSudoku","solvedBoard"],"mappings":"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","sourcesContent":["import { Constants, DifficultyType } from \"../utils/Constants\";\nimport { BoardData, createEmptyBoardData } from \"../data/GameData\";\n\n//Import SudokuCore: 使用 import SudokuCore from '../vendor/SudokuCore'; 导入。你需要将 SudokuCore 文件放到 assets/scripts/vendor/ 目录下，或者修改这个路径。\n\n// Singleton Pattern: SudokuLogic 被实现为一个单例 (getInstance() 方法)，因为 SudokuCore 需要初始化一次，并且其内部状态（如 SQUARES, UNITS 等）是共享的。\n// Initialization: 在 constructor 中创建 SudokuCore 实例并调用其 initialize() 方法。\n// Conversion Helpers: 添加了 convertStringToBoardData 和 convertBoardDataToString 两个私有方法，用于在我们的 BoardData 格式和 SudokuCore 使用的字符串格式之间转换。\n// generateSudoku:\n// 根据 SDD 的要求，结合 difficulty 和 levelIndex 计算出目标预设数字数量 (givens)。\n// 调用 this.core.generate(targetGivens) 获取棋盘字符串。\n// 调用 this.core.solve() 来获取解字符串 (这对于后续验证和可能的提示功能很有用)。\n// 使用 convertStringToBoardData 将生成的棋盘字符串和解字符串转换为 BoardData 格式。\n// 添加了错误处理和日志。\n// isValidMove: 重新实现了这个方法，直接在 BoardData 上检查行、列、宫的冲突。这比调用 SudokuCore 的内部函数或求解器进行单步验证要高效得多。\n// isPartComplete: 实现了检查行、列、宫是否完成的逻辑。\n// isBoardComplete: 实现了检查整个棋盘是否完成的逻辑，通过调用 isPartComplete 检查所有部分。注释中也提到了如果 BoardData 包含 solution，可以直接比较 grid 和 solution。\n// getValidCandidates: 添加了一个方法，用于获取指定空格所有合法的候选数字，使用了我们自己实现的 isValidMove。\n// solveSudoku (Optional): 提供了一个可选的方法，如果游戏逻辑的其他部分需要求解一个棋盘状态，可以调用此方法。\n// 下一步:\n// 将 SudokuCore 文件放入 assets/scripts/vendor/ 目录 (如果 vendor 目录不存在，请创建它)。\n// 检查 tsconfig.json: 确保 compilerOptions 中包含 \"allowJs\": true。如果 Cocos Creator 的默认配置没有，你可能需要手动添加或修改。\n// 检查代码: 请仔细检查 SudokuLogic.ts 的代码，特别是路径、难度计算逻辑以及与 SudokuCore 的交互部分。\n\n// --- Import the external JavaScript Sudoku library ---\n// Adjust the path based on where you place SudokuCore\n// We assume 'allowJs' is true in tsconfig.json\n// If direct import fails, we might need ambient declarations (.d.ts)\nimport SudokuCore from '../vendor/SudokuCore'; // Adjust path as needed\n\n/**\n * @description 数独核心逻辑模块\n * 封装了外部 SudokuCore 库的功能，提供符合项目数据结构的接口。\n * 负责生成数独谜题、验证移动合法性、检查完成状态等。\n */\nexport class SudokuLogic {\n\n    private static instance: SudokuLogic | null = null;\n    private core: SudokuCore; // Instance of the external library\n\n    private constructor() {\n        this.core = new SudokuCore();\n        this.core.initialize(); // Initialize the core library structures\n        console.log('[SudokuLogic] SudokuCore initialized.');\n    }\n\n    /**\n     * 获取 SudokuLogic 的单例实例。\n     */\n    public static getInstance(): SudokuLogic {\n        if (!SudokuLogic.instance) {\n            SudokuLogic.instance = new SudokuLogic();\n        }\n        return SudokuLogic.instance;\n    }\n\n    // --- Board Conversion Helpers ---\n\n    /**\n     * 将 SudokuCore 使用的字符串棋盘格式转换为项目使用的 BoardData 格式。\n     * @param boardString 81个字符的字符串，'.' 代表空格。\n     * @param solutionString (可选) 81个字符的解字符串。\n     * @returns 返回 BoardData 对象。\n     */\n    private convertStringToBoardData(boardString: string, solutionString?: string): BoardData {\n        const boardData = createEmptyBoardData();\n        if (boardString.length !== Constants.GRID_SIZE * Constants.GRID_SIZE) {\n            console.error(\"[SudokuLogic] Invalid board string length for conversion:\", boardString);\n            return boardData; // Return empty board on error\n        }\n\n        for (let r = 0; r < Constants.GRID_SIZE; r++) {\n            for (let c = 0; c < Constants.GRID_SIZE; c++) {\n                const index = r * Constants.GRID_SIZE + c;\n                const char = boardString[index];\n\n                if (char >= '1' && char <= '9') {\n                    boardData.grid[r][c] = parseInt(char, 10);\n                    boardData.presetMask[r][c] = true; // Digits in the initial string are presets\n                } else {\n                    boardData.grid[r][c] = 0; // '.' or other becomes 0\n                    boardData.presetMask[r][c] = false;\n                }\n            }\n        }\n\n        // Convert solution if provided\n        if (solutionString && solutionString.length === Constants.GRID_SIZE * Constants.GRID_SIZE) {\n            boardData.solution = createEmptyBoardData().grid; // Initialize solution grid\n             for (let r = 0; r < Constants.GRID_SIZE; r++) {\n                for (let c = 0; c < Constants.GRID_SIZE; c++) {\n                    const index = r * Constants.GRID_SIZE + c;\n                    const solChar = solutionString[index];\n                     if (solChar >= '1' && solChar <= '9') {\n                        boardData.solution[r][c] = parseInt(solChar, 10);\n                    } else {\n                         boardData.solution[r][c] = 0; // Should not happen for a valid solution\n                    }\n                }\n            }\n        }\n\n\n        return boardData;\n    }\n\n    /**\n     * 将项目使用的 BoardData 格式转换为 SudokuCore 使用的字符串格式。\n     * 只转换 grid 数据，忽略 presetMask。\n     * @param boardData BoardData 对象。\n     * @returns 81个字符的字符串，0 被转换成 '.'。\n     */\n    private convertBoardDataToString(boardData: BoardData): string {\n        let boardString = \"\";\n        for (let r = 0; r < Constants.GRID_SIZE; r++) {\n            for (let c = 0; c < Constants.GRID_SIZE; c++) {\n                const num = boardData.grid[r][c];\n                boardString += (num >= 1 && num <= 9) ? num.toString() : this.core.BLANK_CHAR;\n            }\n        }\n        return boardString;\n    }\n\n    // --- Puzzle Generation ---\n\n    /**\n     * 根据难度和关卡序号生成数独谜题。\n     * @param difficulty 游戏难度 ('入门', '初级', ...)\n     * @param levelIndex 关卡序号 (1-30)\n     * @returns 返回包含初始棋盘和解的 BoardData 对象，如果生成失败则返回 null。\n     */\n    public generateSudoku(difficulty: DifficultyType, levelIndex: number): BoardData | null {\n        console.log(`[SudokuLogic] Generating puzzle for difficulty: ${difficulty}, level: ${levelIndex}`);\n\n        let difficultyKey: keyof typeof Constants.Difficulty | null = null;\n        for (const key in Constants.Difficulty) {\n            // 使用类型断言确保 key 是 Difficulty 的有效键\n            const typedKey = key as keyof typeof Constants.Difficulty;\n            if (Constants.Difficulty[typedKey] === difficulty) {\n                difficultyKey = typedKey;\n                break;\n            }\n        }\n\n        if (!difficultyKey) {\n            console.error(`[SudokuLogic] 无法找到难度 \"${difficulty}\" 对应的内部 Key。`);\n            return null;\n        }\n\n        // 1. 计算目标空格数 (根据 SDD 5.4.2)\n        const diffConfig = Constants.DifficultyEmptyCells[difficultyKey];\n        if (!diffConfig) {\n            console.error(`[SudokuLogic] Invalid difficulty provided: ${difficultyKey}`);\n            return null;\n        }\n        const targetEmpty = Math.round(\n            diffConfig.start + ((diffConfig.end - diffConfig.start) / (Constants.LEVELS_PER_DIFFICULTY - 1)) * (levelIndex - 1)\n        );\n\n        // 2. 计算目标预设数字数量 (Givens)\n        let targetGivens = Constants.GRID_SIZE * Constants.GRID_SIZE - targetEmpty;\n        // 确保 Givens 在 SudokuCore 允许的范围内 (它内部有 MIN_GIVENS=17)\n        targetGivens = Math.max(this.core.MIN_GIVENS, Math.min(80, targetGivens)); // 81 is trivial, 80 max practical\n\n        console.log(`[SudokuLogic] Target empty cells: ${targetEmpty}, Target givens: ${targetGivens}`);\n\n        try {\n            // 3. 调用 SudokuCore 生成棋盘字符串\n            // The generate function in SudokuCore takes the number of GIVENS.\n            const boardString = this.core.generate(targetGivens);\n\n            if (!boardString || boardString.length !== 81) {\n                 console.error('[SudokuLogic] Failed to generate valid board string from core library.');\n                 return null;\n            }\n            console.log('[SudokuLogic] Board string generated:', boardString);\n\n            // 4. (可选但推荐) 获取解\n            // Solve the generated puzzle to get the solution string\n            const solutionString = this.core.solve(boardString);\n             if (!solutionString) {\n                 console.warn('[SudokuLogic] Generated board might not have a unique solution or solver failed. Proceeding without solution.');\n                 // Decide if you want to retry generation or proceed without a stored solution\n                 // return this.generateSudoku(difficulty, levelIndex); // Example: Retry\n            }\n\n\n            // 5. 转换格式\n            const boardData = this.convertStringToBoardData(boardString, solutionString || undefined);\n\n            console.log('[SudokuLogic] Puzzle generated successfully.');\n            // this.core.print_board(boardString); // Optional: Print to console for debugging\n            return boardData;\n\n        } catch (error) {\n            console.error('[SudokuLogic] Error during puzzle generation:', error);\n            return null;\n        }\n    }\n\n    // --- Validation and Checking ---\n\n    /**\n     * 检查在指定位置填入数字是否符合数独规则（行、列、宫不冲突）。\n     * 注意：这只检查直接冲突，不检查是否会导致无解。\n     * @param boardData 当前棋盘数据。\n     * @param row 检查的行 (0-8)。\n     * @param col 检查的列 (0-8)。\n     * @param num 要填入的数字 (1-9)。\n     * @returns 如果填入合法则返回 true，否则返回 false。\n     */\n    public isValidMove(boardData: BoardData, row: number, col: number, num: number): boolean {\n        if (num < 1 || num > 9 || row < 0 || row >= Constants.GRID_SIZE || col < 0 || col >= Constants.GRID_SIZE) {\n            return false; // Invalid input\n        }\n\n        // 1. 检查行冲突\n        for (let c = 0; c < Constants.GRID_SIZE; c++) {\n            if (boardData.grid[row][c] === num && c !== col) {\n                return false;\n            }\n        }\n\n        // 2. 检查列冲突\n        for (let r = 0; r < Constants.GRID_SIZE; r++) {\n            if (boardData.grid[r][col] === num && r !== row) {\n                return false;\n            }\n        }\n\n        // 3. 检查宫冲突\n        const boxStartRow = Math.floor(row / Constants.BOX_SIZE) * Constants.BOX_SIZE;\n        const boxStartCol = Math.floor(col / Constants.BOX_SIZE) * Constants.BOX_SIZE;\n        for (let r = boxStartRow; r < boxStartRow + Constants.BOX_SIZE; r++) {\n            for (let c = boxStartCol; c < boxStartCol + Constants.BOX_SIZE; c++) {\n                if (boardData.grid[r][c] === num && (r !== row || c !== col)) {\n                    return false;\n                }\n            }\n        }\n\n        // 如果都没有冲突，则是合法的移动\n        return true;\n    }\n\n     /**\n     * 检查指定的行/列/宫是否已经完成（填满且无重复数字）。\n     * @param boardData 当前棋盘数据。\n     * @param type 类型: 'row', 'col', 或 'box'。\n     * @param index 行号(0-8), 列号(0-8), 或宫索引(0-8, 从左到右, 从上到下)。\n     * @returns 如果完成则返回 true，否则返回 false。\n     */\n    public isPartComplete(boardData: BoardData, type: 'row' | 'col' | 'box', index: number): boolean {\n        const numbers = new Set<number>();\n        let count = 0;\n\n        if (type === 'row') {\n            if (index < 0 || index >= Constants.GRID_SIZE) return false;\n            for (let c = 0; c < Constants.GRID_SIZE; c++) {\n                const num = boardData.grid[index][c];\n                if (num > 0) {\n                    if (numbers.has(num)) return false; // Duplicate\n                    numbers.add(num);\n                    count++;\n                }\n            }\n        } else if (type === 'col') {\n             if (index < 0 || index >= Constants.GRID_SIZE) return false;\n            for (let r = 0; r < Constants.GRID_SIZE; r++) {\n                const num = boardData.grid[r][index];\n                 if (num > 0) {\n                    if (numbers.has(num)) return false; // Duplicate\n                    numbers.add(num);\n                    count++;\n                }\n            }\n        } else if (type === 'box') {\n             if (index < 0 || index >= Constants.GRID_SIZE) return false;\n            const boxStartRow = Math.floor(index / Constants.BOX_SIZE) * Constants.BOX_SIZE;\n            const boxStartCol = (index % Constants.BOX_SIZE) * Constants.BOX_SIZE;\n            for (let r = boxStartRow; r < boxStartRow + Constants.BOX_SIZE; r++) {\n                for (let c = boxStartCol; c < boxStartCol + Constants.BOX_SIZE; c++) {\n                    const num = boardData.grid[r][c];\n                     if (num > 0) {\n                        if (numbers.has(num)) return false; // Duplicate\n                        numbers.add(num);\n                        count++;\n                    }\n                }\n            }\n        } else {\n            return false; // Invalid type\n        }\n\n        // Must have exactly 9 unique numbers (1-9)\n        return count === Constants.GRID_SIZE && numbers.size === Constants.GRID_SIZE;\n    }\n\n\n    /**\n     * 检查整个棋盘是否已经完成。\n     * @param boardData 当前棋盘数据。\n     * @returns 如果完成则返回 true，否则返回 false。\n     */\n    public isBoardComplete(boardData: BoardData): boolean {\n        // 简单方法：检查每一行、每一列、每一宫是否都完成\n        for (let i = 0; i < Constants.GRID_SIZE; i++) {\n            if (!this.isPartComplete(boardData, 'row', i)) return false;\n            if (!this.isPartComplete(boardData, 'col', i)) return false;\n            if (!this.isPartComplete(boardData, 'box', i)) return false;\n        }\n        return true;\n\n        // 或者，如果 BoardData 中存储了 solution，可以直接比较：\n        /*\n        if (!boardData.solution) {\n            console.warn(\"[SudokuLogic] Cannot check board completion against solution: solution is missing.\");\n            // Fallback to checking all parts\n             for (let i = 0; i < Constants.GRID_SIZE; i++) {\n                if (!this.isPartComplete(boardData, 'row', i)) return false;\n                if (!this.isPartComplete(boardData, 'col', i)) return false;\n                if (!this.isPartComplete(boardData, 'box', i)) return false;\n            }\n            return true;\n        }\n\n        for (let r = 0; r < Constants.GRID_SIZE; r++) {\n            for (let c = 0; c < Constants.GRID_SIZE; c++) {\n                if (boardData.grid[r][c] !== boardData.solution[r][c]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n        */\n    }\n\n    /**\n     * 获取指定格子所有合法的候选数字。\n     * @param boardData 当前棋盘数据。\n     * @param row 行 (0-8)。\n     * @param col 列 (0-8)。\n     * @returns 返回一个包含所有合法候选数字的数组，如果格子已填或无效则返回空数组。\n     */\n    public getValidCandidates(boardData: BoardData, row: number, col: number): number[] {\n        if (row < 0 || row >= Constants.GRID_SIZE || col < 0 || col >= Constants.GRID_SIZE || boardData.grid[row][col] !== 0) {\n            return []; // Invalid cell or already filled\n        }\n\n        const candidates: number[] = [];\n        for (let num = 1; num <= 9; num++) {\n            if (this.isValidMove(boardData, row, col, num)) {\n                candidates.push(num);\n            }\n        }\n        return candidates;\n    }\n\n    // --- (Optional) Expose Solver if needed elsewhere ---\n    /**\n     * 尝试解决给定的棋盘状态。\n     * @param boardData 要解决的棋盘数据。\n     * @returns 返回包含解的 BoardData，如果无解则返回 null。\n     */\n    public solveSudoku(boardData: BoardData): BoardData | null {\n         try {\n            const boardString = this.convertBoardDataToString(boardData);\n            const solutionString = this.core.solve(boardString);\n            if (solutionString) {\n                // Convert solution string back to BoardData (grid only)\n                const solvedBoard = createEmptyBoardData();\n                 for (let r = 0; r < Constants.GRID_SIZE; r++) {\n                    for (let c = 0; c < Constants.GRID_SIZE; c++) {\n                        const index = r * Constants.GRID_SIZE + c;\n                        solvedBoard.grid[r][c] = parseInt(solutionString[index], 10);\n                        // Preset mask is irrelevant for a solved board\n                    }\n                }\n                return solvedBoard;\n            } else {\n                return null; // No solution found\n            }\n        } catch (error) {\n            console.error('[SudokuLogic] Error during solving:', error);\n            return null;\n        }\n    }\n}"]}