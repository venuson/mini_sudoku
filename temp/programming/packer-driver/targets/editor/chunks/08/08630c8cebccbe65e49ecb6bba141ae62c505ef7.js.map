{"version":3,"sources":["file:///Users/ruiwei/Documents/cocos/SudokuWechatGame/assets/scripts/services/PersistenceManager.ts"],"names":["PersistenceManager","Constants","SettingsData","saveSettings","settings","dataString","JSON","stringify","wx","setStorageSync","StorageKeys","SETTINGS","console","log","error","loadSettings","getStorageSync","data","parse","fromObject","saveUnfinishedGame","progress","UNFINISHED_GAME","loadUnfinishedGame","difficulty","levelIndex","undefined","currentBoardState","elapsedTime","warn","clearUnfinishedGame","removeStorageSync","hasSavedGame","info","getStorageInfoSync","keys","includes"],"mappings":"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","sourcesContent":["import { Constants } from \"../utils/Constants\";\nimport { SettingsData } from \"../data/SettingsData\";\nimport { LocalUserProgress } from \"../data/UserData\";\n// Import BoardData related functions if needed for deep cloning on load/save,\n// but typically cloning happens *before* saving or *after* loading in the calling manager.\n// import { cloneBoardData } from \"../data/GameData\";\n\n/**\n * @description 本地持久化管理器\n * 使用微信小程序的同步本地存储 API (wx.setStorageSync, wx.getStorageSync, wx.removeStorageSync)\n * 负责游戏设置和未完成游戏进度的本地读写。\n *\n * 注意：此类仅处理本地存储。云端数据的同步由 AccountManager 和 CloudService 处理。\n */\nexport class PersistenceManager {\n\n    /**\n     * 保存游戏设置到本地存储。\n     * @param settings 要保存的 SettingsData 对象。\n     */\n    static saveSettings(settings: SettingsData): void {\n        try {\n            const dataString = JSON.stringify(settings);\n            wx.setStorageSync(Constants.StorageKeys.SETTINGS, dataString);\n            console.log('[PersistenceManager] Settings saved.');\n        } catch (error) {\n            console.error('[PersistenceManager] Error saving settings:', error);\n            // 在小游戏中，同步存储通常不会抛出序列化错误，除非对象非常复杂或循环引用\n            // 但捕获以防万一\n        }\n    }\n\n    /**\n     * 从本地存储加载游戏设置。\n     * 如果本地没有存储或数据无效，则返回包含默认值的 SettingsData 对象。\n     * @returns 返回 SettingsData 实例。\n     */\n    static loadSettings(): SettingsData {\n        try {\n            const dataString = wx.getStorageSync(Constants.StorageKeys.SETTINGS);\n            if (dataString && typeof dataString === 'string') {\n                const data = JSON.parse(dataString);\n                // 使用 SettingsData.fromObject 来处理可能不完整的旧数据或格式问题\n                const settings = SettingsData.fromObject(data);\n                console.log('[PersistenceManager] Settings loaded:', settings);\n                return settings;\n            } else {\n                console.log('[PersistenceManager] No settings found in storage, returning defaults.');\n                // 没有找到数据，返回默认设置\n                return new SettingsData();\n            }\n        } catch (error) {\n            console.error('[PersistenceManager] Error loading or parsing settings, returning defaults:', error);\n            // 解析失败或发生其他错误，返回默认设置\n            return new SettingsData();\n        }\n    }\n\n    /**\n     * 保存未完成的游戏进度到本地存储。\n     * @param progress 要保存的 LocalUserProgress 对象。\n     */\n    static saveUnfinishedGame(progress: LocalUserProgress): void {\n        try {\n            // 考虑是否需要深拷贝 progress.currentBoardState，\n            // 但通常调用者（如 GameManager）在调用此方法前应确保传入的是独立副本。\n            const dataString = JSON.stringify(progress);\n            wx.setStorageSync(Constants.StorageKeys.UNFINISHED_GAME, dataString);\n            console.log('[PersistenceManager] Unfinished game saved.');\n        } catch (error) {\n            console.error('[PersistenceManager] Error saving unfinished game:', error);\n        }\n    }\n\n    /**\n     * 从本地存储加载未完成的游戏进度。\n     * @returns 返回 LocalUserProgress 对象，如果不存在或加载失败则返回 null。\n     */\n    static loadUnfinishedGame(): LocalUserProgress | null {\n        try {\n            const dataString = wx.getStorageSync(Constants.StorageKeys.UNFINISHED_GAME);\n            if (dataString && typeof dataString === 'string') {\n                const data = JSON.parse(dataString);\n                // 这里可以添加更严格的类型检查，确保加载的数据结构符合 LocalUserProgress\n                // 例如，检查必要的字段是否存在\n                if (data && data.difficulty && data.levelIndex !== undefined && data.currentBoardState && data.elapsedTime !== undefined) {\n                     // 考虑是否需要深拷贝 data.currentBoardState，\n                     // 调用者（如 GameManager）在接收到数据后通常会进行拷贝以防后续意外修改。\n                    console.log('[PersistenceManager] Unfinished game loaded.');\n                    return data as LocalUserProgress; // 类型断言\n                } else {\n                    console.warn('[PersistenceManager] Loaded unfinished game data is invalid or incomplete.');\n                    this.clearUnfinishedGame(); // 清理无效数据\n                    return null;\n                }\n            } else {\n                console.log('[PersistenceManager] No unfinished game found in storage.');\n                return null;\n            }\n        } catch (error) {\n            console.error('[PersistenceManager] Error loading or parsing unfinished game:', error);\n            this.clearUnfinishedGame(); // 加载或解析出错时也清理掉，避免下次再出错\n            return null;\n        }\n    }\n\n    /**\n     * 清除本地存储的未完成游戏进度。\n     */\n    static clearUnfinishedGame(): void {\n        try {\n            wx.removeStorageSync(Constants.StorageKeys.UNFINISHED_GAME);\n            console.log('[PersistenceManager] Unfinished game cleared from storage.');\n        } catch (error) {\n            console.error('[PersistenceManager] Error clearing unfinished game:', error);\n        }\n    }\n\n    /**\n     * 检查本地是否存在未完成的游戏进度。\n     * @returns 如果存在则返回 true，否则返回 false。\n     */\n    static hasSavedGame(): boolean {\n        try {\n            const info = wx.getStorageInfoSync();\n            return info.keys.includes(Constants.StorageKeys.UNFINISHED_GAME);\n            // 或者直接尝试获取值判断是否为空\n            // return !!wx.getStorageSync(Constants.StorageKeys.UNFINISHED_GAME);\n        } catch (error) {\n            console.error('[PersistenceManager] Error checking for saved game:', error);\n            return false;\n        }\n    }\n}"]}