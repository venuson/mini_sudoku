{"version":3,"sources":["file:///Users/ruiwei/Documents/cocos/SudokuWechatGame/assets/scripts/components/PopupBase.ts"],"names":["_decorator","Component","Node","Button","UIOpacity","tween","Vec3","BlockInputEvents","isValid","ccclass","property","PopupBase","type","tooltip","Number","_uiManager","_isOpen","onLoad","backgroundMask","getComponent","addComponent","console","log","name","on","EventType","TOUCH_END","close","closeButton","node","CLICK","init","uiManager","show","args","active","onOpen","playOpenAnimation","interactable","off","error","playCloseAnimation","onClose","destroy","panel","setScale","to","openDuration","scale","easing","start","opacityComp","opacity","callback","actions","push","Promise","resolve","closeDuration","call","all","then","onDestroy"],"mappings":"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","sourcesContent":["// assets/scripts/components/PopupBase.ts\n\nimport { _decorator, Component, Node, Button, UIOpacity, tween, Vec3, BlockInputEvents, log, isValid } from 'cc';\nimport { UIManager } from '../managers/UIManager'; // 可能需要 UIManager 引用来关闭\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('PopupBase')\nexport class PopupBase extends Component {\n\n    @property({ type: Node, tooltip: \"弹窗背景遮罩节点\" })\n    protected backgroundMask: Node | null = null;\n\n    @property({ type: Node, tooltip: \"弹窗主面板节点\" })\n    protected panel: Node | null = null;\n\n    @property({ type: Button, tooltip: \"关闭按钮\" })\n    protected closeButton: Button | null = null;\n\n    // --- 动画参数 ---\n    @property({ type: Number, tooltip: \"打开动画时长 (秒)\" })\n    protected openDuration: number = 0.2;\n\n    @property({ type: Number, tooltip: \"关闭动画时长 (秒)\" })\n    protected closeDuration: number = 0.15;\n\n    // --- 内部状态 ---\n    protected _uiManager: UIManager | null = null; // UIManager 引用，用于调用关闭\n    protected _isOpen: boolean = false;\n\n    protected onLoad(): void {\n        // 添加 BlockInputEvents 组件到背景遮罩，阻止点击穿透到下层 UI\n        if (this.backgroundMask && !this.backgroundMask.getComponent(BlockInputEvents)) {\n            this.backgroundMask.addComponent(BlockInputEvents);\n        }\n\n        // 默认给背景遮罩添加点击关闭弹窗的功能 (可选)\n        console.log(`[PopupBase] 绑定背景遮罩点击事件: ${this.backgroundMask?.name}`);\n        this.backgroundMask?.on(Node.EventType.TOUCH_END, this.close, this);\n\n        // 绑定关闭按钮事件\n        console.log(`[PopupBase] 绑定关闭按钮事件: ${this.closeButton?.node.name}`);\n        this.closeButton?.node.on(Button.EventType.CLICK, this.close, this);\n    }\n\n    /**\n     * 初始化弹窗，由 UIManager 调用。\n     * @param uiManager UIManager 的实例引用。\n     */\n    public init(uiManager: UIManager): void {\n        this._uiManager = uiManager;\n    }\n\n    /**\n     * 显示弹窗（通常由 UIManager 调用）。\n     * @param args (可选) 传递给 onOpen 的参数。\n     */\n    public show(...args: any[]): void {\n        if (this._isOpen) return;\n        this._isOpen = true;\n        this.node.active = true; // 确保节点是激活的\n\n        this.onOpen(...args); // 调用子类可能覆盖的打开逻辑\n\n        this.playOpenAnimation(); // 播放打开动画\n        console.log(`[PopupBase] 显示弹窗: ${this.node.name}`);\n    }\n\n    /**\n     * 关闭弹窗。\n     */\n    public close(): void {\n        if (!this._isOpen) return;\n        this._isOpen = false;\n        console.log(`[PopupBase] 请求关闭弹窗: ${this.node.name}`);\n\n        // 禁用交互，防止动画期间再次点击\n        if (this.closeButton) {\n            this.closeButton.interactable = false;\n            this.closeButton.node.off(Button.EventType.CLICK, this.close, this); \n        }\n        if (this.backgroundMask) {\n            this.backgroundMask.off(Node.EventType.TOUCH_END, this.close, this); // 移除监听避免重复触发\n        } else {\n            console.error(`[PopupBase] 背景遮罩节点未设置: ${this.node.name}`);\n        }\n        \n\n        this.playCloseAnimation(() => {\n            this.onClose(); // 调用子类可能覆盖的关闭逻辑\n            // 动画结束后通知 UIManager (如果 UIManager 管理弹窗实例)\n            // 或者直接销毁节点\n            if (isValid(this.node)) {\n                 this.node.destroy();\n                 console.log(`[PopupBase] 弹窗已销毁: ${this.node.name}`);\n            }\n            // 如果是由 UIManager 管理弹窗实例的生命周期，则调用 UIManager 的关闭方法\n            // this._uiManager?.closePopupNode(this.node);\n        });\n    }\n\n    /**\n     * 播放打开动画。子类可以覆盖此方法实现不同的动画效果。\n     */\n    protected playOpenAnimation(): void {\n        if (this.panel) {\n            this.panel.setScale(0.5, 0.5);\n            tween(this.panel)\n                .to(this.openDuration, { scale: new Vec3(1, 1, 1) }, { easing: 'backOut' })\n                .start();\n        }\n        const opacityComp = this.node.getComponent(UIOpacity) || this.node.addComponent(UIOpacity);\n        opacityComp.opacity = 0;\n        tween(opacityComp)\n            .to(this.openDuration, { opacity: 255 })\n            .start();\n    }\n\n    /**\n     * 播放关闭动画。\n     * @param callback 动画完成后的回调。\n     */\n    protected playCloseAnimation(callback?: () => void): void {\n        const actions: Promise<void>[] = [];\n\n        if (this.panel) {\n            actions.push(new Promise(resolve => {\n                tween(this.panel!)\n                    .to(this.closeDuration, { scale: new Vec3(0.5, 0.5, 1) }, { easing: 'backIn' })\n                    .call(resolve)\n                    .start();\n            }));\n        }\n\n        const opacityComp = this.node.getComponent(UIOpacity);\n        if (opacityComp) {\n             actions.push(new Promise(resolve => {\n                tween(opacityComp)\n                    .to(this.closeDuration, { opacity: 0 })\n                    .call(resolve)\n                    .start();\n             }));\n        }\n\n        // 等待所有动画完成\n        Promise.all(actions).then(() => {\n            if (callback) {\n                callback();\n            }\n        });\n    }\n\n    /**\n     * 子类可以覆盖此方法，在弹窗打开时执行特定逻辑（例如加载数据）。\n     * @param args 从 show 方法传递过来的参数。\n     */\n    protected onOpen(...args: any[]): void {\n        // 子类实现\n        console.log(`[PopupBase] onOpen called for ${this.node.name}`);\n    }\n\n    /**\n     * 子类可以覆盖此方法，在弹窗关闭动画完成、节点销毁前执行特定逻辑（例如清理资源）。\n     */\n    protected onClose(): void {\n        // 子类实现\n        // console.log(`[PopupBase] onClose called for ${this.node.name}`);\n    }\n\n    protected onDestroy(): void {\n        console.log(`[PopupBase] onDestroy: ${this.node.name}`);\n    }\n}\n/*\n通用节点引用: 使用 @property 定义了 backgroundMask, panel, closeButton 的引用，子类会继承这些属性，方便在编辑器中赋值。\n动画参数: 提供了 openDuration 和 closeDuration 属性，允许在编辑器中调整动画时长。\nBlockInputEvents: 在 onLoad 中自动为背景遮罩添加 BlockInputEvents 组件，防止点击穿透。\n点击背景关闭: 默认给背景遮罩添加了点击事件，调用 close 方法关闭弹窗。\ninit 方法: 提供给 UIManager 调用，传递 UIManager 的引用，方便弹窗在关闭时通知 UIManager（如果需要）。\nshow 方法:\n设置 _isOpen 状态，激活节点。\n调用 onOpen 虚方法，允许子类执行打开时的特定逻辑。\n调用 playOpenAnimation 播放标准打开动画。\nclose 方法:\n设置 _isOpen 状态。\n禁用交互，移除监听，防止重复关闭。\n调用 playCloseAnimation 播放标准关闭动画。\n在关闭动画的回调中，调用 onClose 虚方法，允许子类执行关闭时的清理逻辑。\n默认直接销毁节点。注释中提到了另一种方式：调用 UIManager 的方法来管理弹窗节点的生命周期。\n动画方法 (playOpenAnimation, playCloseAnimation): 提供了默认的缩放和透明度渐变动画。子类可以通过覆盖这两个方法来实现自定义的打开/关闭动画。\n虚方法 (onOpen, onClose): 定义了两个空的保护方法，供子类覆盖，以在弹窗打开和关闭的关键时机执行自定义逻辑，例如加载数据、绑定特定事件、释放资源等。\nonDestroy: 确保移除事件监听。\n如何使用:\n创建具体的弹窗控制脚本，例如 SettingsPopupController.ts。\n让这个脚本继承自 PopupBase：export class SettingsPopupController extends PopupBase { ... }。\n将 SettingsPopupController.ts 挂载到 SettingsPopup.prefab 的根节点。\n在编辑器中，为 SettingsPopupController 组件设置好从 PopupBase 继承来的 backgroundMask, panel, closeButton 属性。\n(可选) 在 SettingsPopupController 中覆盖 onOpen 或 onClose 方法来添加特定逻辑。\nUIManager 在实例化 SettingsPopup.prefab 后，获取其 SettingsPopupController 组件，并调用 init(this) 和 show() 方法。\n*/"]}