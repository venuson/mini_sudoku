{"version":3,"sources":["file:///Users/ruiwei/Documents/cocos/SudokuWechatGame/assets/scripts/utils/TimeFormatter.ts"],"names":["TimeFormatter","formatSeconds","totalSeconds","isNaN","secondsInt","Math","floor","minutes","seconds","minutesString","toString","padStart","secondsString","formatSecondsWithHours","hours","hoursString"],"mappings":";;;kEAOaA,a;;;;;;;;;;;;;;;AAPb;AAEiC;;AAEjC;AACA;AACA;;;+BACaA,a,GAAN,MAAMA,aAAN,CAAoB;AAEvB;AACJ;AACA;AACA;AACA;AAC+B,eAAbC,aAAa,CAACC,YAAD,EAA+B;AACtD;AACA,cAAIC,KAAK,CAACD,YAAD,CAAL,IAAuBA,YAAY,GAAG,CAA1C,EAA6C;AACzCA,YAAAA,YAAY,GAAG,CAAf;AACH,WAJqD,CAMtD;;;AACA,gBAAME,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWJ,YAAX,CAAnB,CAPsD,CAStD;;AACA,gBAAMK,OAAO,GAAGF,IAAI,CAACC,KAAL,CAAWF,UAAU,GAAG,EAAxB,CAAhB;AACA,gBAAMI,OAAO,GAAGJ,UAAU,GAAG,EAA7B,CAXsD,CAatD;;AACA,gBAAMK,aAAa,GAAGF,OAAO,CAACG,QAAR,GAAmBC,QAAnB,CAA4B,CAA5B,EAA+B,GAA/B,CAAtB;AACA,gBAAMC,aAAa,GAAGJ,OAAO,CAACE,QAAR,GAAmBC,QAAnB,CAA4B,CAA5B,EAA+B,GAA/B,CAAtB;AAEA,iBAAQ,GAAEF,aAAc,IAAGG,aAAc,EAAzC;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACwC,eAAtBC,sBAAsB,CAACX,YAAD,EAA+B;AAC/D;AACA,cAAIC,KAAK,CAACD,YAAD,CAAL,IAAuBA,YAAY,GAAG,CAA1C,EAA6C;AACzCA,YAAAA,YAAY,GAAG,CAAf;AACH;;AAED,gBAAME,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWJ,YAAX,CAAnB;AAEA,gBAAMY,KAAK,GAAGT,IAAI,CAACC,KAAL,CAAWF,UAAU,GAAG,IAAxB,CAAd;AACA,gBAAMG,OAAO,GAAGF,IAAI,CAACC,KAAL,CAAYF,UAAU,GAAG,IAAd,GAAsB,EAAjC,CAAhB;AACA,gBAAMI,OAAO,GAAGJ,UAAU,GAAG,EAA7B;AAEA,gBAAMW,WAAW,GAAGD,KAAK,CAACJ,QAAN,GAAiBC,QAAjB,CAA0B,CAA1B,EAA6B,GAA7B,CAApB;AACA,gBAAMF,aAAa,GAAGF,OAAO,CAACG,QAAR,GAAmBC,QAAnB,CAA4B,CAA5B,EAA+B,GAA/B,CAAtB;AACA,gBAAMC,aAAa,GAAGJ,OAAO,CAACE,QAAR,GAAmBC,QAAnB,CAA4B,CAA5B,EAA+B,GAA/B,CAAtB;AAEA,iBAAQ,GAAEI,WAAY,IAAGN,aAAc,IAAGG,aAAc,EAAxD;AACH;;AAjDsB,O,GAoD3B;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// assets/scripts/utils/TimeFormatter.ts\n\nimport { _decorator } from 'cc'; // 引入 cc 模块以消除可能的警告，虽然这里没用到装饰器\n\n/**\n * @description 时间格式化工具类\n */\nexport class TimeFormatter {\n\n    /**\n     * 将总秒数格式化为 \"MM:SS\" 格式的字符串。\n     * @param totalSeconds 总秒数。可以接受小数，但会向下取整。\n     * @returns 返回 \"MM:SS\" 格式的字符串。如果输入无效，则返回 \"00:00\"。\n     */\n    public static formatSeconds(totalSeconds: number): string {\n        // 处理无效输入\n        if (isNaN(totalSeconds) || totalSeconds < 0) {\n            totalSeconds = 0;\n        }\n\n        // 向下取整确保得到整数秒\n        const secondsInt = Math.floor(totalSeconds);\n\n        // 计算分钟和剩余秒数\n        const minutes = Math.floor(secondsInt / 60);\n        const seconds = secondsInt % 60;\n\n        // 使用 padStart 补零，确保总是两位数\n        const minutesString = minutes.toString().padStart(2, '0');\n        const secondsString = seconds.toString().padStart(2, '0');\n\n        return `${minutesString}:${secondsString}`;\n    }\n\n    /**\n     * (可选) 将总秒数格式化为 \"HH:MM:SS\" 格式的字符串。\n     * @param totalSeconds 总秒数。可以接受小数，但会向下取整。\n     * @returns 返回 \"HH:MM:SS\" 格式的字符串。如果输入无效，则返回 \"00:00:00\"。\n     */\n    public static formatSecondsWithHours(totalSeconds: number): string {\n        // 处理无效输入\n        if (isNaN(totalSeconds) || totalSeconds < 0) {\n            totalSeconds = 0;\n        }\n\n        const secondsInt = Math.floor(totalSeconds);\n\n        const hours = Math.floor(secondsInt / 3600);\n        const minutes = Math.floor((secondsInt % 3600) / 60);\n        const seconds = secondsInt % 60;\n\n        const hoursString = hours.toString().padStart(2, '0');\n        const minutesString = minutes.toString().padStart(2, '0');\n        const secondsString = seconds.toString().padStart(2, '0');\n\n        return `${hoursString}:${minutesString}:${secondsString}`;\n    }\n}\n\n// --- 使用示例 ---\n/*\nimport { TimeFormatter } from './TimeFormatter';\n\nlet time1 = 75; // 1 分 15 秒\nlet time2 = 5;  // 5 秒\nlet time3 = 3661; // 1 小时 1 分 1 秒\nlet time4 = -10;\n\nconsole.log(TimeFormatter.formatSeconds(time1)); // 输出: \"01:15\"\nconsole.log(TimeFormatter.formatSeconds(time2)); // 输出: \"00:05\"\nconsole.log(TimeFormatter.formatSeconds(time4)); // 输出: \"00:00\"\n\nconsole.log(TimeFormatter.formatSecondsWithHours(time3)); // 输出: \"01:01:01\"\nconsole.log(TimeFormatter.formatSecondsWithHours(time1)); // 输出: \"00:01:15\"\n*/\n\n/*\n静态类: TimeFormatter 是一个静态类，所有方法都是静态的，可以直接通过 TimeFormatter.formatSeconds(...) 调用。\nformatSeconds 方法:\n接收总秒数 totalSeconds 作为参数。\n处理了无效输入（NaN, 负数），将其视为 0。\n使用 Math.floor 确保秒数是整数。\n计算分钟 minutes 和剩余秒数 seconds。\n使用 toString().padStart(2, '0') 来确保分钟和秒数始终显示为两位数（例如，5 秒显示为 \"05\"）。\n返回 MM:SS 格式的字符串。\nformatSecondsWithHours 方法 (可选): 提供了另一个格式化方法，可以输出 HH:MM:SS 格式，适用于可能超过一小时的游戏时间。\n无依赖: 这个工具类不依赖 Cocos Creator 的特定组件或生命周期，是一个纯粹的 TypeScript 类。\n使用示例: 代码末尾注释中提供了如何导入和使用这个工具类的示例。\n请检查 TimeFormatter.ts 文件。这个文件比较简单，主要是字符串处理。\n*/"]}