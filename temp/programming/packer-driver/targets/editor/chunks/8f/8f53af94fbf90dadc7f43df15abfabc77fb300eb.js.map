{"version":3,"sources":["file:///Users/ruiwei/Documents/cocos/SudokuWechatGame/assets/scripts/data/GameData.ts"],"names":["createEmptyBoardData","size","GRID_SIZE","grid","presetMask","i","Array","fill","cloneBoardData","boardData","newGrid","map","row","newPresetMask","newSolution","solution","undefined","Constants"],"mappings":";;;;;AAEA;AACA;AACA;;AAwBA;AACA;AACA;;AA0BA;AACA;AACA;AACA;AACA;;AAgBA;AACA;AACA;AACA;AACA;AACA;AApBO,WAASA,oBAAT,CAA8BC,IAAY,GAAG;AAAA;AAAA,8BAAUC,SAAvD,EAA6E;AAChF,UAAMC,IAAgB,GAAG,EAAzB;AACA,UAAMC,UAAuB,GAAG,EAAhC,CAFgF,CAGhF;AACA;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;AAC3BF,MAAAA,IAAI,CAACE,CAAD,CAAJ,GAAUC,KAAK,CAACL,IAAD,CAAL,CAAYM,IAAZ,CAAiB,CAAjB,CAAV;AACAH,MAAAA,UAAU,CAACC,CAAD,CAAV,GAAgBC,KAAK,CAACL,IAAD,CAAL,CAAYM,IAAZ,CAAiB,KAAjB,CAAhB,CAF2B,CAG3B;AACH;;AAED,WAAO;AAAEJ,MAAAA,IAAF;AAAQC,MAAAA;AAAW;;AAAnB,KAAP;AACH;;AAQM,WAASI,cAAT,CAAwBC,SAAxB,EAAyD;AAC5D,UAAMC,OAAO,GAAGD,SAAS,CAACN,IAAV,CAAeQ,GAAf,CAAmBC,GAAG,IAAI,CAAC,GAAGA,GAAJ,CAA1B,CAAhB,CAD4D,CACP;;AACrD,UAAMC,aAAa,GAAGJ,SAAS,CAACL,UAAV,CAAqBO,GAArB,CAAyBC,GAAG,IAAI,CAAC,GAAGA,GAAJ,CAAhC,CAAtB,CAF4D,CAEK;;AACjE,UAAME,WAAW,GAAGL,SAAS,CAACM,QAAV,GAAqBN,SAAS,CAACM,QAAV,CAAmBJ,GAAnB,CAAuBC,GAAG,IAAI,CAAC,GAAGA,GAAJ,CAA9B,CAArB,GAA+DI,SAAnF,CAH4D,CAGkC;;AAE9F,WAAO;AACHb,MAAAA,IAAI,EAAEO,OADH;AAEHN,MAAAA,UAAU,EAAES,aAFT;AAGHE,MAAAA,QAAQ,EAAED;AAHP,KAAP;AAKH;;;;;;;;;;;0BA/Bed,oB;oBAqBAQ;;;;;;;;;AAlFPS,MAAAA,S,iBAAAA,S","sourcesContent":["import { Constants, DifficultyType } from \"../utils/Constants\";\n\n/**\n * @description 定义数独棋盘的数据结构。\n */\nexport interface BoardData {\n    /**\n     * 9x9 的二维数组，存储棋盘上每个格子的数字。\n     * 0 表示该格子为空。\n     * 1-9 表示对应的数字。\n     */\n    grid: number[][];\n\n    /**\n     * 9x9 的二维布尔数组，标记哪些格子是预设的数字。\n     * true 表示该格子是预设数字，不可修改。\n     * false 表示该格子是用户可填写的空格。\n     */\n    presetMask: boolean[][];\n\n    /**\n     * (可选但推荐) 9x9 的二维数组，存储当前谜题的完整解。\n     * 用于快速验证用户输入或检查游戏完成状态。\n     * 如果不存储解，则需要在验证时实时计算或使用其他逻辑。\n     */\n    solution?: number[][]; // 使用 ? 表示可选\n}\n\n/**\n * @description 定义单个游戏关卡的数据结构。\n */\nexport interface LevelData {\n    /**\n     * 关卡难度。\n     * 使用 Constants 中定义的难度类型。\n     */\n    difficulty: DifficultyType;\n\n    /**\n     * 关卡在该难度下的序号 (例如 1 到 30)。\n     */\n    levelIndex: number;\n\n    /**\n     * 关卡开始时的初始棋盘状态。\n     * 包含预设数字和空格。\n     */\n    initialBoard: BoardData;\n\n    /**\n     * 该关卡需要用户填写的空格数量。\n     * 用于难度控制和可能的提示功能。\n     */\n    emptyCellsCount: number;\n}\n\n/**\n * @description (辅助函数) 创建一个空的棋盘数据对象。\n * @param size 棋盘尺寸，默认为 Constants.GRID_SIZE (9)\n * @returns 返回一个初始化的 BoardData 对象，所有格子为空且非预设。\n */\nexport function createEmptyBoardData(size: number = Constants.GRID_SIZE): BoardData {\n    const grid: number[][] = [];\n    const presetMask: boolean[][] = [];\n    // 可选：如果需要，也初始化 solution\n    // const solution: number[][] = [];\n\n    for (let i = 0; i < size; i++) {\n        grid[i] = Array(size).fill(0);\n        presetMask[i] = Array(size).fill(false);\n        // if (solution) solution[i] = Array(size).fill(0);\n    }\n\n    return { grid, presetMask /*, solution */ };\n}\n\n/**\n * @description (辅助函数) 深拷贝一个 BoardData 对象。\n * 防止直接修改原始数据。\n * @param boardData 要拷贝的 BoardData 对象\n * @returns 返回一个新的、独立的 BoardData 对象\n */\nexport function cloneBoardData(boardData: BoardData): BoardData {\n    const newGrid = boardData.grid.map(row => [...row]); // 深拷贝二维数组\n    const newPresetMask = boardData.presetMask.map(row => [...row]); // 深拷贝二维数组\n    const newSolution = boardData.solution ? boardData.solution.map(row => [...row]) : undefined; // 深拷贝可选的 solution\n\n    return {\n        grid: newGrid,\n        presetMask: newPresetMask,\n        solution: newSolution\n    };\n}"]}