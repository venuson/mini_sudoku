{"version":3,"sources":["file:///Users/ruiwei/Documents/cocos/SudokuWechatGame/assets/scripts/components/HistoryItem.ts"],"names":["_decorator","Component","Label","Button","director","Constants","ccclass","property","HistoryItem","type","tooltip","_recordData","onLoad","challengeButton","node","on","EventType","CLICK","onChallengeClick","setData","recordData","console","log","active","difficultyLabel","string","difficulty","levelLabel","levelIndex","bestTimeLabel","formatTime","bestTimeSeconds","dateLabel","date","Date","firstCompletionTimestamp","getFullYear","getMonth","toString","padStart","getDate","emit","EventName","CHALLENGE_BUTTON_CLICKED","totalSeconds","isNaN","minutes","Math","floor","seconds","onDestroy","off","error"],"mappings":"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","sourcesContent":["// assets/scripts/components/HistoryItem.ts\n\nimport { _decorator, Component, Node, Label, Button, log, director } from 'cc';\nimport { LevelRecord } from '../data/UserData'; // 需要 LevelRecord 接口定义\nimport { Constants, DifficultyType } from '../utils/Constants'; // 需要常量和类型\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('HistoryItem')\nexport class HistoryItem extends Component {\n\n    @property({ type: Label, tooltip: \"显示难度的 Label\" })\n    private difficultyLabel: Label | null = null;\n\n    @property({ type: Label, tooltip: \"显示关卡序号的 Label\" })\n    private levelLabel: Label | null = null;\n\n    @property({ type: Label, tooltip: \"显示最佳用时的 Label\" })\n    private bestTimeLabel: Label | null = null;\n\n    @property({ type: Label, tooltip: \"显示首次完成日期的 Label\" })\n    private dateLabel: Label | null = null;\n\n    @property({ type: Button, tooltip: \"再次挑战按钮\" })\n    private challengeButton: Button | null = null;\n\n    // --- 内部数据 ---\n    private _recordData: LevelRecord | null = null; // 存储当前项对应的记录数据\n\n    protected onLoad(): void {\n        // 绑定按钮点击事件\n        this.challengeButton?.node.on(Button.EventType.CLICK, this.onChallengeClick, this);\n    }\n\n    /**\n     * 设置并显示关卡记录数据。\n     * 由 UIManager 在填充列表时调用。\n     * @param recordData 关卡记录数据。\n     */\n    public setData(recordData: LevelRecord): void {\n        this._recordData = recordData;\n\n        if (!recordData) {\n            console.log('[HistoryItem] 设置了空的记录数据。');\n            // 可以选择隐藏节点或显示空状态\n            this.node.active = false;\n            return;\n        }\n\n        this.node.active = true;\n\n        // 更新 UI 显示\n        if (this.difficultyLabel) {\n            this.difficultyLabel.string = recordData.difficulty;\n            // 可以根据难度设置不同的颜色 (可选)\n            // this.difficultyLabel.color = this.getDifficultyColor(recordData.difficulty);\n        }\n        if (this.levelLabel) {\n            this.levelLabel.string = `第 ${recordData.levelIndex} 关`;\n        }\n        if (this.bestTimeLabel) {\n            this.bestTimeLabel.string = `最佳: ${this.formatTime(recordData.bestTimeSeconds)}`;\n        }\n        if (this.dateLabel) {\n            const date = new Date(recordData.firstCompletionTimestamp);\n            // 使用更友好的日期格式\n            this.dateLabel.string = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;\n        }\n    }\n\n    /**\n     * 处理再次挑战按钮点击事件。\n     */\n    private onChallengeClick(): void {\n        if (this._recordData) {\n            console.log(`[HistoryItem] 挑战按钮点击: ${this._recordData.difficulty} - ${this._recordData.levelIndex}`);\n            // 发射全局事件，携带难度和关卡信息，由 GameManager 监听处理\n            director.emit(Constants.EventName.CHALLENGE_BUTTON_CLICKED, this._recordData.difficulty, this._recordData.levelIndex);\n            // UIManager 应该在 GameManager 处理后关闭弹窗\n        } else {\n            console.log('[HistoryItem] 挑战按钮点击时记录数据为空。');\n        }\n    }\n\n    /**\n     * 格式化时间（秒）为 MM:SS 格式。\n     * @param totalSeconds 总秒数。\n     * @returns 返回 MM:SS 格式的字符串。\n     */\n    private formatTime(totalSeconds: number): string {\n        if (isNaN(totalSeconds) || totalSeconds < 0) {\n            return \"00:00\";\n        }\n        const minutes = Math.floor(totalSeconds / 60);\n        const seconds = Math.floor(totalSeconds % 60); // 取整秒\n        return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n    }\n\n    // 可选：根据难度获取颜色\n    // private getDifficultyColor(difficulty: DifficultyType): Color {\n    //     switch (difficulty) {\n    //         case Constants.Difficulty.ENTRY: return Color.GREEN;\n    //         case Constants.Difficulty.EASY: return Color.BLUE;\n    //         case Constants.Difficulty.MEDIUM: return Color.YELLOW; // 可能需要调整颜色使其可见\n    //         case Constants.Difficulty.HARD: return Color.ORANGE;\n    //         case Constants.Difficulty.MASTER: return Color.RED;\n    //         default: return Color.WHITE;\n    //     }\n    // }\n\n    protected onDestroy(): void {\n        // 移除事件监听\n        if (this.challengeButton) {\n            if (this.challengeButton.node) {\n                this.challengeButton.node.off(Button.EventType.CLICK, this.onChallengeClick, this);    \n            } else {\n                console.error('ChallengeButton node is not set in HistoryItem!');\n            }   \n        }else{\n            console.error('ChallengeButton is not set in HistoryItem!');\n        }\n    }\n}\n\n/*\n节点引用: 获取 Prefab 内部各个 Label 和 Button 的引用。\n\n_recordData: 存储传递给该列表项的 LevelRecord 数据。\n\nsetData 方法:\n\n这是核心方法，由 UIManager 在创建和填充历史记录列表时调用。\n\n接收 LevelRecord 数据并存储。\n\n根据数据更新各个 Label 的显示内容。\n\n包含了时间格式化 (formatTime) 和可选的日期格式化。\n\nonChallengeClick 方法:\n\n当“再次挑战”按钮被点击时触发。\n\n从存储的 _recordData 中获取难度和关卡序号。\n\n发射全局事件 Constants.EventName.CHALLENGE_BUTTON_CLICKED，携带必要信息。GameManager 会监听此事件来启动对应的关卡。\n\nformatTime 方法: 一个简单的辅助方法，将秒数格式化为 MM:SS 字符串。\n\n事件绑定与解绑: 在 onLoad 中绑定按钮事件，在 onDestroy 中解绑。\n\n\n*/"]}