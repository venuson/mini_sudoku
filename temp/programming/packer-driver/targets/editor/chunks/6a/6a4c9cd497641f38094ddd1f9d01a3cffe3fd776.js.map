{"version":3,"sources":["file:///Users/ruiwei/Documents/cocos/SudokuWechatGame/assets/scripts/managers/InputManager.ts"],"names":["_decorator","Component","warn","error","director","Constants","ActionRecord","SudokuLogic","cloneBoardData","ccclass","property","InputManager","gridManager","sudokuLogic","uiManager","audioManager","effectsManager","_selectedRow","_selectedCol","_undoStack","_redoStack","_isInputEnabled","_currentBoardData","initialize","console","log","getInstance","on","EventName","CELL_CLICKED","onCellClicked","NUMBER_INPUT","onNumberInput","CLEAR_BUTTON_CLICKED","onClearButtonClicked","UNDO_BUTTON_CLICKED","onUndoButtonClicked","REDO_BUTTON_CLICKED","onRedoButtonClicked","reset","boardData","updateUndoRedoState","updateNumberPadState","row","col","presetMask","deselectCurrentCell","highlightCell","playSFX","AudioClipName","CLICK","num","isValid","isValidMove","previousValue","grid","FILL","playInputAnimation","performFillAction","CLEAR","playClearAnimation","performClearAction","length","action","pop","type","newValue","updateGridCellValue","push","checkCompletionAfterUpdate","recordAction","getCurrentBoardData","value","canUndo","canRedo","updateUndoRedoButtons","validNumbers","getValidCandidates","boxIndex","Math","floor","BOX_SIZE","partCompleted","isPartComplete","APPLAUSE","isBoardComplete","emit","GAME_OVER","deselectCell","onDestroy","off"],"mappings":"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","sourcesContent":["// assets/scripts/managers/InputManager.ts\n\nimport { _decorator, Component, EventTouch, Node, log, warn, error, director, SystemEventType } from 'cc';\nimport { Constants, DifficultyType } from '../utils/Constants';\nimport { ActionRecord } from '../data/ActionRecord';\nimport { GridManager } from './GridManager'; // 需要 GridManager 实例\nimport { SudokuLogic } from '../logic/SudokuLogic'; // 需要 SudokuLogic 实例\nimport { UIManager } from './UIManager'; // 需要 UIManager 实例\nimport { AudioManager } from './AudioManager'; // 需要 AudioManager 实例\nimport { EffectsManager } from './EffectsManager'; // 需要 EffectsManager 实例\nimport { BoardData,cloneBoardData } from '../data/GameData';\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('InputManager')\nexport class InputManager extends Component {\n\n    // --- 依赖注入（或查找） ---\n    // 这些管理器实例需要在 InputManager 初始化时被设置或找到\n    private gridManager: GridManager | null = null;\n    private sudokuLogic: SudokuLogic | null = null;\n    private uiManager: UIManager | null = null;\n    private audioManager: AudioManager | null = null;\n    private effectsManager: EffectsManager | null = null;\n\n    // --- 内部状态 ---\n    private _selectedRow: number = -1; // 当前选中的行 (-1 表示未选中)\n    private _selectedCol: number = -1; // 当前选中的列 (-1 表示未选中)\n    private _undoStack: ActionRecord[] = []; // 撤销栈\n    private _redoStack: ActionRecord[] = []; // 恢复栈\n    private _isInputEnabled: boolean = true; // 控制是否接受输入（例如，动画播放期间可以禁用）\n    private _currentBoardData: BoardData | null = null; // 缓存当前棋盘数据，避免频繁从 GridManager 获取\n\n    // --- 初始化 ---\n    /**\n     * 初始化 InputManager，设置依赖的管理器实例。\n     * 通常由 GameManager 在游戏启动时调用。\n     * @param gridManager GridManager 实例\n     * @param uiManager UIManager 实例\n     * @param audioManager AudioManager 实例\n     * @param effectsManager EffectsManager 实例\n     */\n    public initialize(\n        gridManager: GridManager,\n        uiManager: UIManager,\n        audioManager: AudioManager,\n        effectsManager: EffectsManager\n    ): void {\n        console.log('[InputManager] Initializing...');\n        this.gridManager = gridManager;\n        this.uiManager = uiManager;\n        this.audioManager = audioManager;\n        this.effectsManager = effectsManager;\n        this.sudokuLogic = SudokuLogic.getInstance(); // 获取 SudokuLogic 单例\n\n        if (!this.gridManager || !this.uiManager || !this.audioManager || !this.effectsManager || !this.sudokuLogic) {\n            error('[InputManager] Initialization failed: Missing required manager instances.');\n            return;\n        }\n\n        // 监听来自 UIManager 的事件 (或者直接让 UIManager 调用这里的 public 方法)\n        // 使用事件系统可以更好地解耦\n        director.on(Constants.EventName.CELL_CLICKED, this.onCellClicked, this);\n        director.on(Constants.EventName.NUMBER_INPUT, this.onNumberInput, this);\n        director.on(Constants.EventName.CLEAR_BUTTON_CLICKED, this.onClearButtonClicked, this);\n        director.on(Constants.EventName.UNDO_BUTTON_CLICKED, this.onUndoButtonClicked, this);\n        director.on(Constants.EventName.REDO_BUTTON_CLICKED, this.onRedoButtonClicked, this);\n\n        console.log('[InputManager] Initialized successfully and listening for UI events.');\n    }\n\n    /**\n     * 当开始新游戏或加载游戏时，重置 InputManager 的状态。\n     * @param boardData 当前关卡的棋盘数据副本。\n     */\n    public reset(boardData: BoardData): void {\n        console.log('[InputManager] Resetting state.');\n        this._selectedRow = -1;\n        this._selectedCol = -1;\n        this._undoStack = [];\n        this._redoStack = [];\n        this._isInputEnabled = true;\n        // **非常重要**: 存储棋盘数据的副本，而不是引用\n        this._currentBoardData = boardData; // 假设传入的是克隆后的数据\n        this.updateUndoRedoState();\n        this.updateNumberPadState(); // 清除数字面板状态\n    }\n\n    // --- 事件处理 ---\n\n    /**\n     * 处理格子点击事件。\n     * @param row 被点击的行 (0-8)。\n     * @param col 被点击的列 (0-8)。\n     */\n    private onCellClicked(row: number, col: number): void {\n        console.log(`[InputManager] Cell clicked: (${row}, ${col})`);\n        if (!this._isInputEnabled || !this._currentBoardData) return;\n        \n        // 检查点击的是否是可编辑的格子\n        if (this._currentBoardData.presetMask[row][col]) {\n            console.log('[InputManager] Clicked on a preset cell. Ignoring selection.');\n            return;\n        }\n\n        // 如果点击的是已选中的格子，则取消选择 (可选逻辑)\n        if (this._selectedRow === row && this._selectedCol === col) {\n            this.deselectCurrentCell();\n            return;\n        }\n\n        // 更新选中状态\n        this._selectedRow = row;\n        this._selectedCol = col;\n\n        // 通知 UIManager 更新格子高亮\n        this.uiManager?.highlightCell(row, col);\n\n        // 播放音效\n        this.audioManager?.playSFX(Constants.AudioClipName.CLICK);\n\n        // 更新数字输入板状态\n        this.updateNumberPadState();\n    }\n\n    /**\n     * 处理数字输入按钮点击事件。\n     * @param number 被点击的数字 (1-9)。\n     */\n    private onNumberInput(num: number): void {\n        if (!this._isInputEnabled || this._selectedRow === -1 || this._selectedCol === -1 || !this._currentBoardData) {\n            console.log('[InputManager] Number input ignored: No cell selected or input disabled.');\n            return;\n        }\n\n        const row = this._selectedRow;\n        const col = this._selectedCol;\n\n        // 再次检查是否为预设格子 (安全校验)\n        if (this._currentBoardData.presetMask[row][col]) {\n            warn('[InputManager] Attempted to input number into a preset cell.');\n            return;\n        }\n\n        // 检查输入是否合法 (是否会引起冲突)\n        // 注意：这里可以根据游戏策略决定是否允许输入冲突数字\n        // 如果允许冲突，则不需要 isValidMove 检查，只在完成时判断\n        // 如果不允许冲突，则进行检查\n        const isValid = this.sudokuLogic!.isValidMove(this._currentBoardData, row, col, num);\n        if (!isValid) {\n            console.log(`[InputManager] Invalid move: Placing ${num} at (${row}, ${col}) creates a conflict.`);\n            // 可以给用户反馈，例如震动或提示\n            // this.uiManager?.showInvalidMoveIndicator(row, col);\n            // 播放错误音效？\n            return; // 阻止无效输入\n        }\n\n        const previousValue = this._currentBoardData.grid[row][col];\n\n        if (previousValue === num) {\n            console.log('[InputManager] 输入数字与当前格子数字相同，则视为无效操作.');\n            return;\n        }\n\n        console.log(`[InputManager] Inputting number ${num} at (${row}, ${col}). Previous value: ${previousValue} set _isInputEnabled to false`);\n\n        // 禁用输入，防止动画期间的干扰\n        this._isInputEnabled = false;\n\n        // 1. 播放音效\n        this.audioManager?.playSFX(Constants.AudioClipName.FILL);\n\n        // 2. 通知 UIManager 播放数字出现动画，并在动画后更新数据\n        this.uiManager?.playInputAnimation(row, col, num, () => {\n            this.performFillAction(row, col, num, previousValue);\n            // 重新启用输入\n            this._isInputEnabled = true;\n        });\n    }\n\n    /**\n     * 处理清除按钮点击事件。\n     */\n    private onClearButtonClicked(): void {\n        if (!this._isInputEnabled || this._selectedRow === -1 || this._selectedCol === -1 || !this._currentBoardData) {\n            console.log('[InputManager] Clear ignored: No cell selected or input disabled.');\n            return;\n        }\n\n        const row = this._selectedRow;\n        const col = this._selectedCol;\n\n        // 检查是否为预设格子\n        if (this._currentBoardData.presetMask[row][col]) {\n            console.warn('[InputManager] Attempted to clear a preset cell.');\n            return;\n        }\n\n        const previousValue = this._currentBoardData.grid[row][col];\n        if (previousValue === 0) {\n            console.log('[InputManager] 格子本来就是空的，则无需操作.');\n            return;\n        }\n\n        this._isInputEnabled = false;\n        this.audioManager?.playSFX(Constants.AudioClipName.CLEAR);\n\n        console.log(`[InputManager] 开始清理 (${row}, ${col}). 原先数字为 : ${previousValue}`);\n        // 2. 通知 UIManager 播放数字消失动画，并在动画后更新数据\n        this.uiManager?.playClearAnimation(row, col, () => {\n            this.performClearAction(row, col, previousValue);\n            this._isInputEnabled = true;\n        });\n    }\n\n    /**\n     * 处理撤销按钮点击事件。\n     */\n    private onUndoButtonClicked(): void {\n        if (!this._isInputEnabled || this._undoStack.length === 0) {\n            console.log('[InputManager] Undo ignored: Stack empty or input disabled.');\n            return;\n        }\n\n        const action = this._undoStack.pop()!; // 从撤销栈弹出\n        console.log(`[InputManager] Undoing action: type=${action.type}, cell=(${action.row}, ${action.col}), prev=${action.previousValue}, new=${action.newValue}`);\n\n        // 执行反向操作\n        if (action.type === 'fill') {\n            // 撤销 'fill' 就是 'clear' 回 previousValue (通常是 0)\n            this.uiManager?.playInputAnimation(action.row, action.col, action.previousValue, () => {\n            \n            });\n        } else { // action.type === 'clear'\n            this.uiManager?.playClearAnimation(action.row, action.col, () => {\n                \n            });\n        }\n        this.updateGridCellValue(action.row, action.col, action.previousValue); // 更新数据\n\n        this._redoStack.push(action); // 将操作压入恢复栈\n\n        // 播放音效\n        this.audioManager?.playSFX(Constants.AudioClipName.CLICK); // 使用通用点击音效？\n\n        // 更新按钮状态和数字面板\n        this.updateUndoRedoState();\n        this.updateNumberPadState(); // 撤销后当前选中格子的候选数字可能变化\n        this.checkCompletionAfterUpdate(action.row, action.col); // 检查完成状态\n    }\n\n    /**\n     * 处理恢复按钮点击事件。\n     */\n    private onRedoButtonClicked(): void {\n        if (!this._isInputEnabled || this._redoStack.length === 0) {\n            console.log('[InputManager] Redo ignored: Stack empty or input disabled.');\n            return;\n        }\n\n        const action = this._redoStack.pop()!; // 从恢复栈弹出\n        console.log(`[InputManager] Redoing action: type=${action.type}, cell=(${action.row}, ${action.col}), prev=${action.previousValue}, new=${action.newValue}`);\n\n        // 执行反向操作\n        if (action.type === 'fill') {\n            this.uiManager?.playInputAnimation(action.row, action.col, action.newValue, () => {\n                \n            });\n        } else {\n            this.uiManager?.playClearAnimation(action.row, action.col, () => {\n                \n            });\n        }\n        this.updateGridCellValue(action.row, action.col, action.newValue); // 更新数据\n        this._undoStack.push(action); // 将操作压回撤销栈\n        this.audioManager?.playSFX(Constants.AudioClipName.CLICK);// 播放音效\n\n        // 更新按钮状态和数字面板\n        this.updateUndoRedoState();\n        this.updateNumberPadState();\n        this.checkCompletionAfterUpdate(action.row, action.col); // 检查完成状态\n    }\n\n    // --- 核心操作逻辑 ---\n\n    /**\n     * 执行填充数字的操作，包括更新数据、记录操作、更新UI状态。\n     * @param row 行\n     * @param col 列\n     * @param num 填入的数字\n     * @param previousValue 之前的值\n     */\n    private performFillAction(row: number, col: number, num: number, previousValue: number): void {\n        // 1. 更新棋盘数据\n        this.updateGridCellValue(row, col, num);\n\n        // 2. 创建并记录操作\n        const action = new ActionRecord('fill', row, col, previousValue, num);\n        this.recordAction(action);\n\n        // 3. 更新数字面板状态 (因为当前格子的候选数字变了)\n        this.updateNumberPadState();\n\n        // 4. 检查完成状态 (行、列、宫、全局)\n        this.checkCompletionAfterUpdate(row, col);\n    }\n\n    /**\n     * 执行清除数字的操作，包括更新数据、记录操作、更新UI状态。\n     * @param row 行\n     * @param col 列\n     * @param previousValue 被清除的数字\n     */\n    private performClearAction(row: number, col: number, previousValue: number): void {\n        console.log(`[InputManager] performClearAction: row=${row}, col=${col}, prevValue=${previousValue}`);\n        // 1. 更新棋盘数据 (清除为 0)\n        this.updateGridCellValue(row, col, 0);\n\n        // 2. 创建并记录操作\n        const action = new ActionRecord('clear', row, col, previousValue, 0);\n        this.recordAction(action);\n\n        // 3. 更新数字面板状态 (因为当前格子的候选数字变了)\n        this.updateNumberPadState();\n    }\n\n\n    /**\n     * 获取当前棋盘数据的克隆副本。\n     * 提供给 GameManager 用于保存游戏状态。\n     * @returns 返回当前棋盘数据的深拷贝副本，如果数据无效则返回 null。\n     */\n    public getCurrentBoardData(): BoardData | null {\n        if (!this._currentBoardData) {\n            warn('[InputManager] 尝试获取棋盘数据，但内部缓存为空。');\n            return null;\n        }\n        // 返回克隆副本，防止外部修改影响 InputManager 的内部状态\n        return cloneBoardData(this._currentBoardData);\n    }\n\n    /**\n     * 更新内部棋盘数据模型和通知 GridManager 更新视觉。\n     * @param row 行\n     * @param col 列\n     * @param value 新的值 (0-9)\n     */\n    private updateGridCellValue(row: number, col: number, value: number): void {\n        console.log(`[InputManager] Updating cell (${row}, ${col}) to value: ${value}`);\n        if (!this._currentBoardData) {\n            console.warn('[InputManager] 尝试更新格子，但当前棋盘数据为空。');\n            return;\n        }\n        \n        this._currentBoardData.grid[row][col] = value;\n    }\n\n    /**\n     * 记录一个用户操作到撤销栈，并清空恢复栈。\n     * @param action 要记录的操作。\n     */\n    private recordAction(action: ActionRecord): void {\n        this._undoStack.push(action);\n        this._redoStack = []; \n        this.updateUndoRedoState();\n    }\n\n    // --- 状态更新与检查 ---\n\n    /**\n     * 更新撤销和恢复按钮的可用状态，并通知 UIManager。\n     */\n    private updateUndoRedoState(): void {\n        const canUndo = this._undoStack.length > 0;\n        const canRedo = this._redoStack.length > 0;\n        // 通知 UIManager 更新按钮状态\n        this.uiManager?.updateUndoRedoButtons(canUndo, canRedo);\n        // 或者使用事件\n        // director.emit(Constants.EventName.UNDO_STATE_UPDATE, canUndo, canRedo);\n    }\n\n    /**\n     * 更新数字输入面板按钮的可用状态 (根据当前选中格子)。\n     */\n    private updateNumberPadState(): void {\n        console.log(`[InputManager] Updating number pad state., row ${this._selectedRow}, col ${this._selectedCol}`);\n        if (this._selectedRow === -1 || this._selectedCol === -1 || !this._currentBoardData) {\n            this.uiManager?.updateNumberPadState([]); // 传入空数组表示默认状态或全部可用\n            return;\n        }\n\n        // 获取当前选中格子的合法候选数字\n        const validNumbers = this.sudokuLogic!.getValidCandidates(this._currentBoardData, this._selectedRow, this._selectedCol);\n        // 通知 UIManager 更新数字按钮背景\n        this.uiManager?.updateNumberPadState(validNumbers);\n    }\n\n    /**\n     * 在用户更新格子后检查相关行、列、宫以及整个棋盘的完成状态。\n     * @param row 发生更新的行\n     * @param col 发生更新的列\n     */\n    private checkCompletionAfterUpdate(row: number, col: number): void {\n        console.log(`[InputManager] checkCompletionAfterUpdate: row=${row}, col=${col}`);\n        if (!this._currentBoardData) return;\n\n        const boxIndex = Math.floor(row / Constants.BOX_SIZE) * Constants.BOX_SIZE + Math.floor(col / Constants.BOX_SIZE);\n\n        let partCompleted = false;\n\n        // 检查行\n        if (this.sudokuLogic!.isPartComplete(this._currentBoardData, 'row', row)) {\n            console.log(`[InputManager] Row ${row} completed!`);\n            this.audioManager?.playSFX(Constants.AudioClipName.APPLAUSE);\n            // 可以通知 UIManager 高亮该行\n            // this.uiManager?.highlightCompletedPart('row', row);\n            partCompleted = true;\n        }\n        // 检查列\n        if (this.sudokuLogic!.isPartComplete(this._currentBoardData, 'col', col)) {\n             console.log(`[InputManager] Column ${col} completed!`);\n             this.audioManager?.playSFX(Constants.AudioClipName.APPLAUSE);\n             // this.uiManager?.highlightCompletedPart('col', col);\n             partCompleted = true;\n        }\n        // 检查宫\n        if (this.sudokuLogic!.isPartComplete(this._currentBoardData, 'box', boxIndex)) {\n             console.log(`[InputManager] Box ${boxIndex} completed!`);\n             this.audioManager?.playSFX(Constants.AudioClipName.APPLAUSE);\n             // this.uiManager?.highlightCompletedPart('box', boxIndex);\n             partCompleted = true;\n        }\n\n        // 如果有部分完成，检查全局是否完成\n        if (partCompleted) {\n            console.log('[InputManager] Checking global completion...');\n            if (this.sudokuLogic!.isBoardComplete(this._currentBoardData)) {\n                console.log('[InputManager] Board completed!');\n                this._isInputEnabled = false; // 游戏结束，禁用输入\n                this.deselectCurrentCell(); // 取消选择\n                // 通知 GameManager 游戏胜利\n                director.emit(Constants.EventName.GAME_OVER, true); // isWin = true\n            }\n        }\n    }\n\n\n    /**\n     * 取消当前选中的格子。\n     */\n    private deselectCurrentCell(): void {\n        if (this._selectedRow !== -1 || this._selectedCol !== -1) {\n            console.log('[InputManager] Deselecting cell.');\n            this._selectedRow = -1;\n            this._selectedCol = -1;\n            this.uiManager?.deselectCell(); // 通知 UI 取消高亮\n            this.updateNumberPadState(); // 更新数字面板状态\n        }\n    }\n\n    // --- 清理 ---\n    protected onDestroy(): void {\n        console.log('[InputManager] onDestroy');\n        // 移除事件监听器\n        director.off(Constants.EventName.CELL_CLICKED, this.onCellClicked, this);\n        director.off(Constants.EventName.NUMBER_INPUT, this.onNumberInput, this);\n        director.off(Constants.EventName.CLEAR_BUTTON_CLICKED, this.onClearButtonClicked, this);\n        director.off(Constants.EventName.UNDO_BUTTON_CLICKED, this.onUndoButtonClicked, this);\n        director.off(Constants.EventName.REDO_BUTTON_CLICKED, this.onRedoButtonClicked, this);\n    }\n}\n"]}