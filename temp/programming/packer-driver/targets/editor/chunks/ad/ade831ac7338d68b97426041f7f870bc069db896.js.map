{"version":3,"sources":["file:///Users/ruiwei/Documents/cocos/SudokuWechatGame/assets/scripts/services/CloudService.ts"],"names":["CloudService","log","warn","error","createEmptyUserAccount","generateLevelRecordKey","initializeSimulatedData","isSimulatedDataInitialized","simulatedUserDatabase","clear","defaultUser","simulatedUserId","nickname","avatarUrl","set","callCloudFunction","name","data","console","res","wx","cloud","callFunction","errMsg","Error","result","success","message","code","err","authenticateUser","isSimulatedMode","isNewUser","has","newUser","Promise","resolve","userId","CLOUD_FUNC_AUTH","updateUserRecord","difficulty","levelIndex","timeSeconds","completionTimestamp","userAccount","get","key","existingRecord","levelRecords","isNewCompletion","bestTimeSeconds","firstCompletionTimestamp","totalLevelsCompleted","CLOUD_FUNC_UPDATE_RECORD","fetchUserRecords","Object","keys","length","recordsCopy","JSON","parse","stringify","records","CLOUD_FUNC_FETCH_RECORDS","fetchGlobalRanking","limit","allUsers","Array","from","values","sort","a","b","scoreDiff","ranks","myRankData","undefined","currentUserRank","i","user","rank","rankEntry","substring","score","push","myRank","CLOUD_FUNC_FETCH_RANKING","isArray","fetchLevelData","fetchUserAccountFromDB","db","database","collection","DB_COLLECTION_USERS","doc","errCode","upsertUserAccountToDB","userData","dataToUpdate","created","updated","existingUser","assign","CLOUD_FUNC_FETCH_LEVEL","DB_COLLECTION_LEVELS","Map"],"mappings":"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","sourcesContent":["/*\n开通微信云开发: 你需要在微信开发者工具中开通云开发，并创建一个云环境。获取到云环境 ID。\n创建云函数: 你需要在云开发控制台或微信开发者工具中创建 SDD 中提到的云函数，例如：\nauthenticateUser: 处理用户登录认证，换取 openid。\nupdateUserRecord: 更新用户的关卡记录和最佳成绩。\nfetchUserRecords: 获取指定用户的所有关卡记录。\nfetchGlobalRanking: 获取全局排行榜数据。\n(可选) fetchLevelData: 如果数独题目存储在云端，则需要此函数获取。\n创建数据库集合: 在云数据库中创建需要的集合，例如：\nusers: 存储 UserAccount 数据。\n(可能需要) levels: 如果题目存储在云端。\n为集合设置合适的索引（例如 users 集合的 userId 字段）和权限规则（例如，用户只能读写自己的记录，排行榜函数可以读取所有用户的必要信息）。\n配置环境 ID: 在小游戏项目的 app.js (或等效的入口文件) 中初始化云开发 SDK，并指定你的云环境 ID。\n*/\n// app.js (或其他入口文件)\n/*\nApp({\n  onLaunch() {\n    if (!wx.cloud) {\n      console.error('请使用 2.2.3 或以上的基础库以使用云能力');\n    } else {\n      wx.cloud.init({\n        // env 参数说明：\n        //   env 参数决定接下来小程序发起的云开发调用（wx.cloud.xxx）会默认请求到哪个云环境的资源\n        //   此处请填入环境 ID, 环境 ID 可打开云控制台查看\n        //   如不填则使用默认环境（第一个创建的环境）\n        env: 'YOUR_CLOUD_ENV_ID', // !! 替换成你的云环境 ID\n        traceUser: true, // 是否要捕捉每个用户的访问记录。设置为 true 不会增加额外的费用。\n      });\n      console.log('微信云开发已初始化, Env ID:', 'YOUR_CLOUD_ENV_ID');\n    }\n  },\n  // ... 其他 App 配置\n});\n*/\n\nimport { log, warn, error } from 'cc';\nimport { Constants, DifficultyType } from '../utils/Constants';\nimport { UserAccount, LevelRecord, RankingEntry, createEmptyUserAccount, generateLevelRecordKey } from '../data/UserData';\nimport { LevelData } from '../data/GameData'; // 如果关卡数据在云端\n\n// 微信云开发 API 类型定义 (简化版)\ndeclare const wx: any;\n\ninterface CloudCallFunctionResult {\n    result: any; // 云函数返回的结果在 result 字段中\n    errMsg: string;\n}\n\ninterface CloudDBQueryResult {\n    data: any[]; // 查询结果数组\n    errMsg: string;\n}\n\ninterface CloudDBUpdateResult {\n    stats: {\n        updated?: number; // 更新的记录数\n        created?: number; // 创建的记录数 (upsert 时)\n    };\n    _id?: string; // 新增记录的 _id (upsert 时)\n    errMsg: string;\n}\n\n/**\n * @description 云服务接口模块\n * 封装与微信云开发 (Cloud Base) 的交互逻辑，包括调用云函数和操作数据库。\n * 为 AccountManager 等提供统一的异步接口。\n */\nexport class CloudService {\n\n    // --- 云函数名称定义 ---\n    private static readonly CLOUD_FUNC_AUTH = 'authenticateUser';\n    private static readonly CLOUD_FUNC_UPDATE_RECORD = 'updateUserRecord';\n    private static readonly CLOUD_FUNC_FETCH_RECORDS = 'fetchUserRecords';\n    private static readonly CLOUD_FUNC_FETCH_RANKING = 'fetchGlobalRanking';\n    private static readonly CLOUD_FUNC_FETCH_LEVEL = 'fetchLevelData'; // 如果需要\n\n    // --- 云数据库集合名称定义 ---\n    private static readonly DB_COLLECTION_USERS = 'users';\n    private static readonly DB_COLLECTION_LEVELS = 'levels'; // 如果需要\n\n    // --- 模拟数据存储 ---\n    /** 模拟当前登录的用户 ID */\n    private static simulatedUserId: string = \"local_user_001\";\n    /** 模拟的用户数据库 (Map: userId -> UserAccount) */\n    private static simulatedUserDatabase: Map<string, UserAccount> = new Map();\n    /** 标记模拟数据是否已初始化 */\n    private static isSimulatedDataInitialized: boolean = false;\n\n    private static isSimulatedMode: boolean = true; // 模拟模式开关\n\n    /**\n         * 初始化模拟数据 (只执行一次)。\n         * @private\n         */\n    private static initializeSimulatedData(): void {\n        if (this.isSimulatedDataInitialized) return;\n        log('[CloudService (Sim)] 初始化模拟数据...');\n        this.simulatedUserDatabase.clear();\n        // 创建一个默认的模拟用户\n        const defaultUser = createEmptyUserAccount(this.simulatedUserId);\n        // (可选) 添加一些模拟数据用于测试\n        defaultUser.nickname = \"模拟玩家\";\n        defaultUser.avatarUrl = \"\"; // 本地模拟通常不处理头像 URL\n        // 添加一些模拟记录\n        // const key1 = generateLevelRecordKey(Constants.Difficulty.ENTRY, 1);\n        // defaultUser.levelRecords[key1] = { difficulty: Constants.Difficulty.ENTRY, levelIndex: 1, bestTimeSeconds: 120, firstCompletionTimestamp: Date.now() - 86400000 };\n        // const key2 = generateLevelRecordKey(Constants.Difficulty.ENTRY, 2);\n        // defaultUser.levelRecords[key2] = { difficulty: Constants.Difficulty.ENTRY, levelIndex: 2, bestTimeSeconds: 155, firstCompletionTimestamp: Date.now() };\n        // defaultUser.totalLevelsCompleted = 2;\n\n        this.simulatedUserDatabase.set(this.simulatedUserId, defaultUser);\n        this.isSimulatedDataInitialized = true;\n        log('[CloudService (Sim)] 模拟数据初始化完成。用户:', defaultUser);\n    }\n\n    /**\n     * 调用云函数。\n     * @param name 云函数名称。\n     * @param data 传递给云函数的参数。\n     * @returns 返回云函数执行结果 (result 字段)。\n     * @throws 如果调用失败或云函数返回错误，则抛出错误。\n     */\n    private static async callCloudFunction<T = any>(name: string, data: object = {}): Promise<T> {\n        console.log(`[CloudService] 调用云函数: ${name}, 参数:`, data);\n        try {\n            const res: CloudCallFunctionResult = await wx.cloud.callFunction({\n                name: name,\n                data: data\n            });\n\n            console.log(`[CloudService] 云函数 ${name} 返回:`, res);\n\n            // 检查微信调用本身的错误信息\n            if (res.errMsg !== 'cloud.callFunction:ok') {\n                throw new Error(`调用云函数 ${name} 失败: ${res.errMsg}`);\n            }\n\n            // 检查云函数内部是否返回了错误状态 (需要与云函数约定)\n            if (res.result && res.result.success === false) {\n                throw new Error(`云函数 ${name} 执行失败: ${res.result.message || '未知错误'}`);\n            }\n            if (res.result && res.result.code && res.result.code !== 0 && res.result.code !== 200) {\n                 throw new Error(`云函数 ${name} 返回错误码 ${res.result.code}: ${res.result.message || '未知错误'}`);\n            }\n\n\n            // 返回云函数的实际结果\n            return res.result as T;\n\n        } catch (err) {\n            error(`[CloudService] 调用云函数 ${name} 时发生异常:`, err);\n            throw err; // 将错误继续向上抛出，由调用者处理\n        }\n    }\n\n    // --- 用户认证 ---\n\n    /**\n     * 调用云函数进行用户认证。\n     * @param code wx.login 获取到的临时登录凭证。\n     * @returns 返回包含 userId (openid) 和可能的其他用户信息的结果。\n     *          需要与 authenticateUser 云函数的返回值约定。\n     *          例如: { success: true, userId: string, isNewUser: boolean }\n     */\n    static async authenticateUser(code: string): Promise<{ userId: string; isNewUser: boolean }> {\n        if (this.isSimulatedMode) {\n            this.initializeSimulatedData(); // 确保模拟数据已初始化\n            log(`[CloudService (Sim)] 模拟用户认证 (code: ${code})`);\n    \n            let isNewUser = false;\n            if (!this.simulatedUserDatabase.has(this.simulatedUserId)) {\n                isNewUser = true;\n                const newUser = createEmptyUserAccount(this.simulatedUserId);\n                newUser.nickname = \"模拟新玩家\";\n                this.simulatedUserDatabase.set(this.simulatedUserId, newUser);\n                log('[CloudService (Sim)] 模拟新用户创建:', newUser);\n            }\n    \n            log(`[CloudService (Sim)] 模拟认证成功: userId=${this.simulatedUserId}, isNewUser=${isNewUser}`);\n            // 使用 Promise.resolve 保持异步接口\n            return Promise.resolve({ userId: this.simulatedUserId, isNewUser: isNewUser });\n        } else {\n            try {\n                const result = await this.callCloudFunction<{ userId: string; isNewUser: boolean }>(\n                    this.CLOUD_FUNC_AUTH,\n                    { code: code }\n                );\n                // 假设云函数直接返回 { userId: '...', isNewUser: true/false }\n                if (!result || !result.userId) {\n                     throw new Error('认证云函数未返回有效的 userId。');\n                }\n                console.log(`[CloudService] 用户认证成功: userId=${result.userId}, isNewUser=${result.isNewUser}`);\n                return result;\n            } catch (err) {\n                error('[CloudService] 用户认证失败:', err);\n                throw err; // 重新抛出错误\n            }\n        }\n        \n    }\n\n    // --- 用户记录读写 ---\n\n    /**\n     * 调用云函数更新用户的关卡记录和最佳成绩。\n     * 云函数内部会处理比较时间、更新记录、更新总完成数等逻辑。\n     * @param userId 用户 ID (openid)。\n     * @param difficulty 难度。\n     * @param levelIndex 关卡序号。\n     * @param timeSeconds 完成用时 (秒)。\n     * @param completionTimestamp 完成时间戳。\n     * @returns 返回操作结果，例如 { success: true }。需要与 updateUserRecord 云函数约定。\n     */\n    static async updateUserRecord(\n        userId: string,\n        difficulty: DifficultyType,\n        levelIndex: number,\n        timeSeconds: number,\n        completionTimestamp: number\n    ): Promise<{ success: boolean }> {\n        if (this.isSimulatedMode) {\n            log(`[CloudService (Sim)] 模拟更新用户记录: User=${userId}, Level=${difficulty}-${levelIndex}, Time=${timeSeconds}s`);\n\n            const userAccount = this.simulatedUserDatabase.get(this.simulatedUserId); // 操作固定模拟用户的数据\n\n            if (!userAccount) {\n                error(`[CloudService (Sim)] 模拟用户 ${this.simulatedUserId} 不存在，无法更新记录。`);\n                return Promise.resolve({ success: false });\n            }\n\n            const key = generateLevelRecordKey(difficulty, levelIndex);\n            const existingRecord = userAccount.levelRecords[key];\n            let isNewCompletion = false;\n\n            if (existingRecord) {\n                // 记录已存在，比较时间\n                if (timeSeconds < existingRecord.bestTimeSeconds) {\n                    log(`[CloudService (Sim)] 更新最佳时间: ${timeSeconds}s (原: ${existingRecord.bestTimeSeconds}s)`);\n                    existingRecord.bestTimeSeconds = timeSeconds;\n                    // 可以选择是否更新完成时间戳\n                    // existingRecord.lastCompletionTimestamp = completionTimestamp;\n                } else {\n                    log(`[CloudService (Sim)] 本次用时 ${timeSeconds}s 未超过最佳时间 ${existingRecord.bestTimeSeconds}s`);\n                }\n            } else {\n                // 新记录\n                log(`[CloudService (Sim)] 添加新记录: ${key}`);\n                userAccount.levelRecords[key] = {\n                    difficulty: difficulty,\n                    levelIndex: levelIndex,\n                    bestTimeSeconds: timeSeconds,\n                    firstCompletionTimestamp: completionTimestamp\n                };\n                userAccount.totalLevelsCompleted = (userAccount.totalLevelsCompleted || 0) + 1;\n                isNewCompletion = true;\n                log(`[CloudService (Sim)] 用户总完成数更新为: ${userAccount.totalLevelsCompleted}`);\n            }\n\n            // 可以在这里打印更新后的用户数据以供调试\n            // log('[CloudService (Sim)] 更新后的模拟用户数据:', userAccount);\n\n            return Promise.resolve({ success: true });\n        } else {\n            try {\n                const result = await this.callCloudFunction<{ success: boolean }>(\n                    this.CLOUD_FUNC_UPDATE_RECORD,\n                    {\n                        // userId 会通过云函数上下文自动获取，通常不需要显式传递\n                        // userId: userId,\n                        difficulty: difficulty,\n                        levelIndex: levelIndex,\n                        timeSeconds: timeSeconds,\n                        completionTimestamp: completionTimestamp\n                    }\n                );\n                 if (!result || result.success !== true) {\n                     throw new Error('更新用户记录云函数执行失败或未返回成功状态。');\n                 }\n                 console.log(`[CloudService] 用户记录更新成功: ${difficulty}-${levelIndex}, time=${timeSeconds}s`);\n                return result;\n            } catch (err) {\n                error('[CloudService] 更新用户记录失败:', err);\n                throw err;\n            }\n        }\n    }\n\n    /**\n     * 调用云函数获取指定用户的所有关卡记录。\n     * @param userId 用户 ID (openid)。\n     * @returns 返回包含 LevelRecord 对象的 Map 或数组。需要与 fetchUserRecords 云函数约定。\n     *          例如: { success: true, records: { [key: string]: LevelRecord } }\n     */\n    static async fetchUserRecords(userId: string): Promise<{ [key: string]: LevelRecord }> {\n        if (this.isSimulatedMode) {\n            this.initializeSimulatedData();\n            log(`[CloudService (Sim)] 模拟获取用户记录: User=${userId}`);\n\n            const userAccount = this.simulatedUserDatabase.get(this.simulatedUserId); // 获取固定模拟用户的数据\n\n            if (userAccount && userAccount.levelRecords) {\n                log(`[CloudService (Sim)] 返回 ${Object.keys(userAccount.levelRecords).length} 条模拟记录。`);\n                // 返回记录数据的副本，防止外部直接修改模拟数据库\n                const recordsCopy = JSON.parse(JSON.stringify(userAccount.levelRecords));\n                return Promise.resolve({ records: recordsCopy });\n            } else {\n                console.log('[CloudService (Sim)] 模拟用户不存在或无记录，返回空记录。');\n                return Promise.resolve({ records: {} });\n            }\n        } else {\n            try {\n                // 通常获取自己的记录不需要传 userId，云函数从上下文获取\n               const result = await this.callCloudFunction<{ records: { [key: string]: LevelRecord } }>(\n                   this.CLOUD_FUNC_FETCH_RECORDS\n                   // { userId: userId } // 如果需要获取其他用户的记录（通常不这么做）\n               );\n                if (!result || typeof result.records !== 'object') {\n                    // 如果记录为空，云函数应该返回 { records: {} } 而不是 null 或 undefined\n                    warn('[CloudService] 获取用户记录云函数未返回有效的 records 对象，可能用户无记录。');\n                    return {}; // 返回空对象\n                }\n                console.log(`[CloudService] 获取用户记录成功，共 ${Object.keys(result.records).length} 条。`);\n               return result.records;\n           } catch (err) {\n               error('[CloudService] 获取用户记录失败:', err);\n               throw err;\n           }\n        }\n\n         \n    }\n\n    // --- 排行榜 ---\n\n    /**\n     * 调用云函数获取全局排行榜数据。\n     * @param limit 获取排行的数量，默认为 100。\n     * @returns 返回包含 RankingEntry 数组和当前用户排名信息的结果。\n     *          需要与 fetchGlobalRanking 云函数约定。\n     *          例如: { success: true, ranks: RankingEntry[], myRank?: RankingEntry }\n     */\n    static async fetchGlobalRanking(limit: number = 100): Promise<{ ranks: RankingEntry[]; myRank?: RankingEntry }> {\n        if (this.isSimulatedMode) {\n            this.initializeSimulatedData();\n            console.log(`[CloudService (Sim)] 模拟获取排行榜数据 (limit: ${limit})`);\n\n            // 1. 将 Map 转换为数组并排序\n            const allUsers = Array.from(this.simulatedUserDatabase.values());\n            allUsers.sort((a, b) => {\n                // 主要按总完成数降序\n                const scoreDiff = (b.totalLevelsCompleted || 0) - (a.totalLevelsCompleted || 0);\n                if (scoreDiff !== 0) return scoreDiff;\n                // (可选) 次要排序条件，例如按平均时间升序或按最后登录时间降序\n                // const avgTimeA = calculateAverageTime(a.levelRecords); // 需要实现计算平均时间的逻辑\n                // const avgTimeB = calculateAverageTime(b.levelRecords);\n                // return avgTimeA - avgTimeB;\n                return 0; // 暂不添加次要排序\n            });\n\n            // 2. 生成排名列表 (RankingEntry)\n            const ranks: RankingEntry[] = [];\n            let myRankData: RankingEntry | undefined = undefined;\n            let currentUserRank: number = -1;\n\n            for (let i = 0; i < allUsers.length; i++) {\n                const user = allUsers[i];\n                const rank = i + 1;\n\n                // 创建 RankingEntry\n                const rankEntry: RankingEntry = {\n                    rank: rank,\n                    userId: user.userId,\n                    nickname: user.nickname || `玩家${user.userId.substring(user.userId.length - 4)}`, // 默认昵称\n                    avatarUrl: user.avatarUrl || \"\", // 默认空头像\n                    score: user.totalLevelsCompleted || 0\n                };\n\n                // 添加到列表 (限制数量)\n                if (rank <= limit) {\n                    ranks.push(rankEntry);\n                }\n\n                // 记录当前模拟用户的排名\n                if (user.userId === this.simulatedUserId) {\n                    currentUserRank = rank;\n                    myRankData = { ...rankEntry }; // 复制一份作为 myRank\n                }\n\n                // 如果已经找到了当前用户且排名超出了 limit，可以提前结束循环（优化）\n                // if (currentUserRank !== -1 && rank > limit) {\n                //     break;\n                // }\n            }\n\n            console.log(`[CloudService (Sim)] 生成排行榜 ${ranks.length} 条。我的排名: ${currentUserRank !== -1 ? currentUserRank : '未上榜'}`);\n\n            return Promise.resolve({ ranks: ranks, myRank: myRankData });\n        } else {\n            try {\n                const result = await this.callCloudFunction<{ ranks: RankingEntry[]; myRank?: RankingEntry }>(\n                    this.CLOUD_FUNC_FETCH_RANKING,\n                    { limit: limit }\n                );\n                 if (!result || !Array.isArray(result.ranks)) {\n                     throw new Error('获取排行榜云函数未返回有效的 ranks 数组。');\n                 }\n                 console.log(`[CloudService] 获取排行榜成功，共 ${result.ranks.length} 条。我的排名:`, result.myRank);\n                return result;\n            } catch (err) {\n                error('[CloudService] 获取排行榜失败:', err);\n                throw err;\n            }\n        }\n    }\n\n    // --- 关卡数据 (如果存储在云端) ---\n\n    /**\n     * (可选) 调用云函数或直接查询数据库获取指定关卡的题目数据。\n     * @param difficulty 难度。\n     * @param levelIndex 关卡序号。\n     * @returns 返回 LevelData 对象。\n     */\n    static async fetchLevelData(difficulty: DifficultyType, levelIndex: number): Promise<LevelData | null> {\n        console.log(`[CloudService (Sim)] 模拟获取关卡数据: ${difficulty}-${levelIndex} (返回 null，由本地生成)`);\n        return Promise.resolve(null); // 假设关卡总是本地生成\n        // 如果使用云函数:\n        /*\n        try {\n            const result = await this.callCloudFunction<LevelData>(\n                this.CLOUD_FUNC_FETCH_LEVEL,\n                { difficulty: difficulty, levelIndex: levelIndex }\n            );\n            if (!result || !result.initialBoard) { // 简单校验\n                 throw new Error('获取关卡数据云函数未返回有效数据。');\n            }\n            console.log(`[CloudService] 获取关卡数据成功: ${difficulty}-${levelIndex}`);\n            return result;\n        } catch (err) {\n            error(`[CloudService] 获取关卡数据失败 (${difficulty}-${levelIndex}):`, err);\n            throw err;\n        }\n        */\n\n        // 如果直接查询数据库 (假设权限允许):\n        /*\n        try {\n            const db = wx.cloud.database();\n            const res: CloudDBQueryResult = await db.collection(this.DB_COLLECTION_LEVELS)\n                .where({\n                    difficulty: difficulty,\n                    levelIndex: levelIndex\n                })\n                .limit(1)\n                .get();\n\n            if (res.data && res.data.length > 0) {\n                console.log(`[CloudService] 从数据库获取关卡数据成功: ${difficulty}-${levelIndex}`);\n                // 注意：数据库返回的数据可能包含 _id, _openid 等字段，需要清理或转换\n                return res.data[0] as LevelData; // 需要确保类型匹配\n            } else {\n                 warn(`[CloudService] 在数据库中未找到关卡数据: ${difficulty}-${levelIndex}`);\n                 return null;\n            }\n        } catch (err) {\n             error(`[CloudService] 从数据库获取关卡数据失败 (${difficulty}-${levelIndex}):`, err);\n             throw err;\n        }\n        */\n    }\n\n    // --- (可选) 直接操作数据库的示例 (如果云函数逻辑简单) ---\n    /**\n     * (示例) 直接查询数据库获取用户信息。\n     * 注意：需要配置好数据库权限，通常只允许用户读取自己的信息。\n     * @param userId 用户 ID。\n     * @returns 返回 UserAccount 对象，如果找不到则返回 null。\n     */\n    static async fetchUserAccountFromDB(userId: string): Promise<UserAccount | null> {\n        if (this.isSimulatedMode) {\n            this.initializeSimulatedData();\n            console.log(`[CloudService (Sim)] 模拟从 DB 获取用户账户: ${userId}`);\n            const userAccount = this.simulatedUserDatabase.get(userId);\n            if (userAccount) {\n                // 返回副本\n                return Promise.resolve(JSON.parse(JSON.stringify(userAccount)));\n            } else {\n                return Promise.resolve(null);\n            }\n        } else {\n            try {\n                const db = wx.cloud.database();\n                const res: CloudDBQueryResult = await db.collection(this.DB_COLLECTION_USERS)\n                    .doc(userId) // 直接用 openid 作为文档 ID\n                    .get();\n    \n                if (res.data) {\n                    console.log(`[CloudService] 从数据库获取用户账户成功: ${userId}`);\n                    // 数据库返回的数据可能与 UserAccount 接口不完全匹配，需要转换\n                    return res.data as UserAccount; // 假设结构一致\n                } else {\n                     // 用户不存在或权限不足\n                     warn(`[CloudService] 在数据库中未找到用户账户或无权限: ${userId}`);\n                     return null;\n                }\n            } catch (err) {\n                 // err.errCode === -502004 表示记录不存在\n                 if (err.errCode === -502004) {\n                      warn(`[CloudService] 数据库记录不存在: ${userId}`);\n                      return null;\n                 }\n                 error(`[CloudService] 从数据库获取用户账户失败 (${userId}):`, err);\n                 throw err;\n            }\n        }\n    }\n\n     /**\n     * (示例) 直接使用 upsert (更新或插入) 创建/更新用户信息。\n     * 注意：权限配置！通常只允许用户更新自己的文档。\n     * @param userData 要更新或创建的用户数据。\n     * @returns 返回操作结果。\n     */\n    static async upsertUserAccountToDB(userData: Partial<UserAccount> & { userId: string }): Promise<CloudDBUpdateResult> {\n        if (this.isSimulatedMode) {\n            this.initializeSimulatedData();\n            const userId = userData.userId;\n            console.log(`[CloudService (Sim)] 模拟 Upsert 用户账户到 DB: ${userId}`);\n\n            const dataToUpdate = { ...userData };\n            // delete dataToUpdate.userId; // userId 是 Map 的 key，不需要删除\n\n            let created = false;\n            let updated = false;\n\n            if (this.simulatedUserDatabase.has(userId)) {\n                // 更新现有用户\n                const existingUser = this.simulatedUserDatabase.get(userId)!;\n                // 合并数据 (简单覆盖)\n                Object.assign(existingUser, dataToUpdate);\n                updated = true;\n                console.log(`[CloudService (Sim)] 模拟更新用户: ${userId}`);\n            } else {\n                // 创建新用户\n                const newUser = createEmptyUserAccount(userId);\n                Object.assign(newUser, dataToUpdate);\n                this.simulatedUserDatabase.set(userId, newUser);\n                created = true;\n                console.log(`[CloudService (Sim)] 模拟创建用户: ${userId}`);\n            }\n\n            return Promise.resolve({ success: true, created: created, updated: updated });\n        } else {\n            try {\n                const db = wx.cloud.database();\n                const userId = userData.userId;\n                // 从 userData 中移除 userId，因为它通常是文档 ID\n                const dataToUpdate = { ...userData };\n                delete dataToUpdate.userId;\n    \n                const res: CloudDBUpdateResult = await db.collection(this.DB_COLLECTION_USERS)\n                    .doc(userId)\n                    .set({ // set 会覆盖整个文档，如果只想更新部分字段用 update\n                        data: dataToUpdate\n                    });\n                    // 或者使用 update，如果只想更新特定字段，且需要处理记录不存在的情况\n                    /*\n                    const res = await db.collection(this.DB_COLLECTION_USERS).doc(userId).update({\n                        data: dataToUpdate // 只包含要更新的字段\n                    });\n                    // update 在记录不存在时会报错，需要先查询或使用 upsert (云函数中更容易实现)\n                    */\n    \n                console.log(`[CloudService] Upsert 用户账户到数据库成功: ${userId}`, res);\n                return res;\n            } catch (err) {\n                 error(`[CloudService] Upsert 用户账户到数据库失败 (${userData.userId}):`, err);\n                 throw err;\n            }\n        }\n         \n    }\n\n}\n\n/*\n静态类: CloudService 被设计为一个静态类，所有方法都是静态的，方便直接调用 CloudService.authenticateUser(...)，无需实例化。\n\n封装微信 API: 核心是封装了 wx.cloud.callFunction 和可能的 wx.cloud.database() 调用。\n\ncallCloudFunction 辅助方法: 提供了一个通用的调用云函数的私有方法，包含了基本的日志记录、错误检查（微信 API 错误和云函数内部返回的错误状态）。它使用了泛型 <T> 来指定期望的返回类型。\n\n接口方法: 为 SDD 中定义的每个云服务交互点（认证、更新记录、获取记录、获取排行、获取关卡数据）提供了对应的异步 (async) 静态方法。\n\n参数与返回值: 每个方法的参数和返回值都尽量清晰地定义，并注释了需要与对应云函数约定的数据结构。例如，authenticateUser 返回 { userId: string; isNewUser: boolean }。\n\n错误处理: 每个接口方法都包含了 try...catch块，捕获调用云服务时可能发生的错误，记录错误日志，并将错误向上抛出，由调用者（如 AccountManager）处理用户反馈。\n\n云函数优先: 主要逻辑是通过调用云函数实现的。云函数可以更好地处理复杂的业务逻辑（如比较最佳时间、计算排名、处理数据库权限）和原子操作。\n\n直接操作数据库示例 (可选): 代码中也包含了直接使用 wx.cloud.database() 查询 (get) 和更新/插入 (set) 数据库的示例方法 (fetchUserAccountFromDB, upsertUserAccountToDB)。但是，直接在客户端操作数据库需要非常谨慎地配置数据库权限规则，以防安全问题。对于写操作（如更新记录），强烈建议通过云函数进行，云函数天然拥有更高的权限，并且可以进行更严格的数据校验。\n\n常量定义: 定义了云函数和数据库集合的名称常量，方便管理和修改。\n\n环境 ID 配置: 强调了需要在 app.js 中初始化云开发并配置环境 ID。\n\n请仔细检查 CloudService.ts 的代码，特别是云函数名称、数据库集合名称以及与云函数约定的数据结构。确保你已经在微信云开发环境中创建了对应的云函数和数据库集合，并配置好了权限*/"]}