{"version":3,"sources":["file:///Users/ruiwei/Documents/cocos/SudokuWechatGame/assets/scripts/managers/AudioManager.ts"],"names":["_decorator","Component","AudioClip","AudioSource","resources","director","error","warn","Constants","ccclass","property","AudioManager","type","tooltip","_audioClips","Map","_isInitialized","_isLoading","_isBgmEnabled","_isSfxEnabled","_currentBgmName","instance","_instance","onLoad","console","log","destroy","node","parent","addPersistRootNode","bgmSource","getComponent","addComponent","loop","sfxSource","sources","getComponents","find","s","onDestroy","initialize","initialSettings","bgmEnabled","sfxEnabled","loadAudioAssets","playBGM","AudioClipName","BGM","err","clipNames","Object","values","loadPromises","clear","name","path","push","Promise","resolve","reject","load","clip","set","all","size","setBgmEnabled","enabled","stopBGM","setSfxEnabled","clipName","get","playing","stop","play","pauseBGM","pause","resumeBGM","playSFX","volume","playOneShot","getAudioClip"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, AudioClip, AudioSource, resources, director, error, warn, log, CCBoolean } from 'cc';\nimport { Constants } from '../utils/Constants';\nimport { SettingsData } from '../data/SettingsData';\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('AudioManager')\nexport class AudioManager extends Component {\n    // --- Singleton Instance ---\n    private static _instance: AudioManager | null = null;\n    public static get instance(): AudioManager {\n        if (!this._instance) {\n            // This error indicates the AudioManagerNode hasn't been loaded or initialized yet.\n            error(\"[AudioManager] Instance requested before initialization or node doesn't exist.\");\n        }\n        // The '!' asserts that _instance is non-null, assuming proper setup.\n        return this._instance!;\n    }\n\n    // --- Editor Properties ---\n    // Assign these in the Cocos Creator Editor Inspector panel by dragging AudioSource components here.\n    // If left null, the script will attempt to add them in onLoad.\n    @property({ type: AudioSource, tooltip: \"AudioSource component for background music (looping)\" })\n    private bgmSource: AudioSource | null = null;\n\n    @property({ type: AudioSource, tooltip: \"AudioSource component for sound effects (non-looping)\" })\n    private sfxSource: AudioSource | null = null;\n\n    // --- Private State ---\n    private _audioClips: Map<string, AudioClip> = new Map();\n    private _isInitialized: boolean = false;\n    private _isLoading: boolean = false; // Prevent concurrent loading\n    private _isBgmEnabled: boolean = true;\n    private _isSfxEnabled: boolean = true;\n    private _currentBgmName: string | null = null; // Track the currently intended BGM\n\n    // --- Lifecycle Callbacks ---\n    protected onLoad(): void {\n        console.log('[AudioManager] onLoad');\n        // Implement Singleton pattern\n        if (AudioManager._instance && AudioManager._instance !== this) {\n            warn('[AudioManager] Another instance already exists. Destroying this one.');\n            this.destroy();\n            return;\n        }\n        AudioManager._instance = this;\n\n        // Make this node persistent across scene changes (if your game has multiple scenes)\n        // If it's a single-scene game, this might not be strictly necessary but doesn't hurt.\n        if (this.node.parent) { // Avoid error if it's already a root node somehow\n             director.addPersistRootNode(this.node);\n             console.log('[AudioManager] Node made persistent.');\n        }\n\n\n        // Ensure AudioSource components exist if not assigned in editor\n        if (!this.bgmSource) {\n            this.bgmSource = this.node.getComponent(AudioSource); // Check if already exists\n            if (!this.bgmSource) {\n                this.bgmSource = this.node.addComponent(AudioSource);\n                console.log('[AudioManager] Added BGM AudioSource component.');\n            }\n        }\n        if (this.bgmSource) {\n            this.bgmSource.loop = true; // Ensure BGM loops\n        } else {\n             error('[AudioManager] Failed to get or create BGM AudioSource!');\n        }\n\n\n        if (!this.sfxSource) {\n            // Check if another AudioSource exists (maybe user added one for SFX)\n            const sources = this.node.getComponents(AudioSource);\n            this.sfxSource = sources.find(s => s !== this.bgmSource) || null; // Find one that isn't the BGM source\n             if (!this.sfxSource) {\n                this.sfxSource = this.node.addComponent(AudioSource);\n                console.log('[AudioManager] Added SFX AudioSource component.');\n            }\n        }\n         if (this.sfxSource) {\n            this.sfxSource.loop = false; // Ensure SFX does not loop\n        } else {\n             error('[AudioManager] Failed to get or create SFX AudioSource!');\n        }\n    }\n\n    protected onDestroy(): void {\n        console.log('[AudioManager] onDestroy');\n        if (AudioManager._instance === this) {\n            AudioManager._instance = null;\n            // Consider stopping audio explicitly here if needed, though components usually handle it.\n            // if (this.bgmSource) this.bgmSource.stop();\n            // if (this.sfxSource) this.sfxSource.stop(); // Might cut off last SFX\n        }\n    }\n\n    // --- Public Initialization Method ---\n    /**\n     * Initializes the AudioManager, loads audio assets, and applies initial settings.\n     * Should be called once during game startup after settings are loaded.\n     * @param initialSettings The initial sound settings (BGM/SFX enabled state).\n     */\n    public async initialize(initialSettings: SettingsData): Promise<void> {\n        if (this._isInitialized) {\n            warn('[AudioManager] Already initialized.');\n            return;\n        }\n        if (this._isLoading) {\n             warn('[AudioManager] Initialization already in progress.');\n            return;\n        }\n\n        console.log('[AudioManager] Initializing...');\n        this._isLoading = true;\n        this._isBgmEnabled = initialSettings.bgmEnabled;\n        this._isSfxEnabled = initialSettings.sfxEnabled;\n        console.log(`[AudioManager] Initial settings - BGM: ${this._isBgmEnabled}, SFX: ${this._isSfxEnabled}`);\n\n        try {\n            await this.loadAudioAssets();\n            this._isInitialized = true;\n            console.log('[AudioManager] Initialized successfully.');\n\n            // Automatically play BGM if it was enabled and loaded\n            if (this._isBgmEnabled) {\n                this.playBGM(Constants.AudioClipName.BGM); // Specify the default BGM\n            }\n        } catch (err) {\n             error('[AudioManager] Initialization failed during audio loading.', err);\n             // Handle initialization failure if necessary\n        } finally {\n             this._isLoading = false;\n        }\n    }\n\n    // --- Asset Loading ---\n    /**\n     * Loads all audio clips defined in Constants.AudioClipName.\n     * Assumes clips are located in 'assets/resources/audio/'.\n     */\n    private async loadAudioAssets(): Promise<void> {\n        console.log('[AudioManager] Starting audio asset loading...');\n        const clipNames = Object.values(Constants.AudioClipName);\n        const loadPromises: Promise<void>[] = [];\n\n        this._audioClips.clear(); // Clear previous clips if any\n\n        for (const name of clipNames) {\n            // Path relative to the 'resources' folder\n            const path = `audio/${name}`;\n            loadPromises.push(\n                new Promise((resolve, reject) => {\n                    resources.load(path, AudioClip, (err, clip) => {\n                        if (err) {\n                            error(`[AudioManager] Failed to load audio clip: ${path}`, err);\n                            // Decide if loading failure for one clip is critical\n                            // For now, we just console.log the error and continue\n                            resolve(); // Resolve even on error to not block Promise.all entirely\n                        } else if (clip) {\n                            this._audioClips.set(name, clip);\n                            console.log(`[AudioManager] Loaded audio clip: ${path}`);\n                            resolve();\n                        } else {\n                             error(`[AudioManager] Loaded audio clip is null: ${path}`);\n                             resolve();\n                        }\n                    });\n                })\n            );\n        }\n\n        await Promise.all(loadPromises);\n        console.log(`[AudioManager] Audio asset loading finished. Loaded ${this._audioClips.size} clips.`);\n    }\n\n    // --- Settings Control ---\n    /**\n     * Updates the enabled state for Background Music (BGM).\n     * Automatically plays or stops the current BGM based on the new state.\n     * @param enabled True to enable BGM, false to disable.\n     */\n    public setBgmEnabled(enabled: boolean): void {\n        if (this._isBgmEnabled === enabled) return; // No change\n\n        this._isBgmEnabled = enabled;\n        console.log(`[AudioManager] Set BGM Enabled: ${enabled}`);\n\n        if (!this._isInitialized) {\n             warn('[AudioManager] setBgmEnabled called before initialization.');\n             return;\n        }\n\n        if (enabled) {\n            if (this._currentBgmName) {\n                 this.playBGM(this._currentBgmName);\n            } else {\n                 this.playBGM(Constants.AudioClipName.BGM);\n            }\n        } else {\n            this.stopBGM();\n        }\n    }\n\n    /**\n     * Updates the enabled state for Sound Effects (SFX).\n     * @param enabled True to enable SFX, false to disable.\n     */\n    public setSfxEnabled(enabled: boolean): void {\n         if (this._isSfxEnabled === enabled) return; // No change\n\n        this._isSfxEnabled = enabled;\n        console.log(`[AudioManager] Set SFX Enabled: ${enabled}`);\n\n        if (!this._isInitialized) {\n             warn('[AudioManager] setSfxEnabled called before initialization.');\n             return;\n        }\n        // No immediate action needed, just prevents future SFX plays if disabled.\n    }\n\n    // --- Playback Control ---\n\n    /**\n     * Plays the specified background music clip. Stops any currently playing BGM first.\n     * Does nothing if BGM is disabled or AudioManager is not initialized.\n     * @param clipName The name of the BGM clip (from Constants.AudioClipName).\n     */\n    public playBGM(clipName: string): void {\n        if (!this._isInitialized || !this._isBgmEnabled || !this.bgmSource) {\n            // console.log(`[AudioManager] BGM play skipped. Initialized: ${this._isInitialized}, Enabled: ${this._isBgmEnabled}`);\n            return;\n        }\n\n        const clip = this._audioClips.get(clipName);\n        if (!clip) {\n            warn(`[AudioManager] BGM clip '${clipName}' not found or not loaded.`);\n            return;\n        }\n\n        // If the requested BGM is already playing, do nothing.\n        if (this.bgmSource.clip === clip && this.bgmSource.playing) {\n            // console.log(`[AudioManager] BGM '${clipName}' is already playing.`);\n            return;\n        }\n\n        console.log(`[AudioManager] Playing BGM: ${clipName}`);\n        this.bgmSource.stop(); // Stop previous BGM if any\n        this.bgmSource.clip = clip;\n        this.bgmSource.play();\n        this._currentBgmName = clipName; // Remember which BGM should be playing\n    }\n\n    /**\n     * Stops the currently playing background music.\n     */\n    public stopBGM(): void {\n        if (!this._isInitialized || !this.bgmSource) return;\n\n        if (this.bgmSource.playing) {\n            console.log('[AudioManager] Stopping BGM.');\n            this.bgmSource.stop();\n        }\n         this._currentBgmName = null; // Clear the intended BGM\n    }\n\n    /**\n     * Pauses the currently playing background music.\n     */\n     public pauseBGM(): void {\n        if (!this._isInitialized || !this.bgmSource) return;\n\n        if (this.bgmSource.playing) {\n            console.log('[AudioManager] Pausing BGM.');\n            this.bgmSource.pause();\n        }\n    }\n\n    /**\n     * Resumes the paused background music.\n     * Does nothing if BGM is disabled or was not playing/paused.\n     */\n     public resumeBGM(): void {\n        if (!this._isInitialized || !this._isBgmEnabled || !this.bgmSource) return;\n\n        if (this._currentBgmName && !this.bgmSource.playing) {\n             const clip = this._audioClips.get(this._currentBgmName);\n             if (clip && this.bgmSource.clip !== clip) {\n                 this.bgmSource.clip = clip;\n             }\n             console.log('[AudioManager] Resuming BGM.');\n             this.bgmSource.play();\n        } else if (!this._currentBgmName) {\n             warn('[AudioManager] Resume BGM called but no BGM was intended to be playing.');\n        }\n    }\n\n    /**\n     * Plays the specified sound effect clip once.\n     * Does nothing if SFX is disabled or AudioManager is not initialized.\n     * @param clipName The name of the SFX clip (from Constants.AudioClipName).\n     * @param volume Optional volume multiplier (0.0 to 1.0). Defaults to 1.0.\n     */\n    public playSFX(clipName: string, volume: number = 1.0): void {\n        if (!this._isInitialized || !this._isSfxEnabled || !this.sfxSource) {\n            // console.log(`[AudioManager] SFX play skipped. Initialized: ${this._isInitialized}, Enabled: ${this._isSfxEnabled}`);\n            return;\n        }\n\n        const clip = this._audioClips.get(clipName);\n        if (clip) {\n            // Use playOneShot for sound effects. It allows overlapping sounds\n            // and doesn't interfere with the main AudioSource state (like clip or loop).\n            this.sfxSource.playOneShot(clip, volume);\n            // console.log(`[AudioManager] Playing SFX: ${clipName}`); // Logging every SFX can be noisy\n        } else {\n            warn(`[AudioManager] SFX clip '${clipName}' not found or not loaded.`);\n        }\n    }\n\n    /**\n     * Retrieves a loaded AudioClip by name.\n     * @param clipName The name of the clip.\n     * @returns The AudioClip if loaded, otherwise undefined.\n     */\n    public getAudioClip(clipName: string): AudioClip | undefined {\n        return this._audioClips.get(clipName);\n    }\n}"]}