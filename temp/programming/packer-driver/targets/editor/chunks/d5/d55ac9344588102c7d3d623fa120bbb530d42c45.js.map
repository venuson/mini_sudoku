{"version":3,"sources":["file:///Users/ruiwei/Documents/cocos/SudokuWechatGame/assets/scripts/components/GridCell.ts"],"names":["_decorator","Component","Node","Sprite","Color","ccclass","property","GridCell","type","tooltip","_row","_col","_isPreset","_currentValue","init","row","col","value","isPreset","updateDisplay","numberFrame","presetColor","numberDisplayNode","numSprite","getComponent","active","console","log","spriteFrame","color","warn","setHighlight","highlightSprite","node","getNumberDisplayNode","onDestroy"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Sprite, Color, SpriteFrame, Button, UIOpacity } from 'cc';\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('GridCell')\nexport class GridCell extends Component {\n\n    @property({ type: Sprite, tooltip: \"背景 Sprite 组件\" })\n    private bgSprite: Sprite | null = null;\n\n    @property({ type: Node, tooltip: \"用于显示数字的节点 (可以是 Sprite 或 Label)\" })\n    private numberDisplayNode: Node | null = null;\n\n    @property({ type: Sprite, tooltip: \"高亮状态的 Sprite 组件 (可选)\" })\n    private highlightSprite: Sprite | null = null;\n\n    // --- 格子自身属性 ---\n    private _row: number = -1;\n    private _col: number = -1;\n    private _isPreset: boolean = false;\n    private _currentValue: number = 0;\n\n    // --- 初始化 ---\n    /**\n     * 初始化格子组件。\n     * 通常由 GridManager 在创建格子时调用。\n     * @param row 格子的行索引 (0-8)。\n     * @param col 格子的列索引 (0-8)。\n     */\n    public init(row: number, col: number): void {\n        this._row = row;\n        this._col = col;\n    }\n\n    // --- 公共方法 ---\n\n    /**\n     * 获取格子的行索引。\n     */\n    public get row(): number {\n        return this._row;\n    }\n\n    /**\n     * 获取格子的列索引。\n     */\n    public get col(): number {\n        return this._col;\n    }\n\n    /**\n     * 获取格子当前显示的数值。\n     */\n    public get value(): number {\n        return this._currentValue;\n    }\n\n    /**\n     * 获取格子是否是预设数字。\n     */\n    public get isPreset(): boolean {\n        return this._isPreset;\n    }\n\n    public updateDisplay(value: number, isPreset: boolean, numberFrame: SpriteFrame | null): void {\n        this._currentValue = value;\n        this._isPreset = isPreset;\n        let presetColor: Color = new Color(0xcc, 0xcc, 0xcc, 255);\n\n        // 更新数字\n        if (this.numberDisplayNode) {\n            const numSprite = this.numberDisplayNode.getComponent(Sprite);\n            if (value > 0) {\n                this.numberDisplayNode.active = true;\n                console.log(`[GridCell] 更新数字: ${value}，预设: ${isPreset}`);\n                if (numSprite && numberFrame) { // 优先使用 Sprite\n                    numSprite.spriteFrame = numberFrame;\n                    if (isPreset) {\n                        numSprite.color = presetColor;\n                    } \n                } else {\n                    console.warn(`[GridCell] 未找到数字显示组件 (Sprite 或 Label)。`);\n                }\n            } else {\n                console.log(`[GridCell] 清除数字: ${value}`);\n                numSprite.spriteFrame = null;\n                this.numberDisplayNode.active = false;\n            }\n        }\n\n        // 隐藏高亮\n        // this.setHighlight(false);\n    }\n\n    /**\n     * 设置格子的高亮状态。\n     * @param active 是否激活高亮。\n     */\n    public setHighlight(active: boolean): void {\n        if (this.highlightSprite) {\n            this.highlightSprite.node.active = active;\n            console.log(`[GridCell] setHighlight:${active}`);\n        }\n    }\n\n    /**\n     * 获取数字显示节点的引用，用于动画。\n     */\n    public getNumberDisplayNode(): Node | null {\n        return this.numberDisplayNode;\n    }\n\n\n    protected onDestroy(): void {\n    }\n}\n"]}