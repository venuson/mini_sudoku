{"version":3,"sources":["file:///Users/ruiwei/Documents/cocos/SudokuWechatGame/assets/scripts/managers/GridManager.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","error","warn","log","isValid","director","UIOpacity","Constants","cloneBoardData","GridCell","ccclass","property","GridManager","type","tooltip","_currentSelectedNode","_gridCells","_currentBoardData","_isInitialized","_presetCellsToReveal","uiManager","effectsManager","initialize","console","cellPrefab","createGridCells","node","removeAllChildren","gridSize","GRID_SIZE","r","c","cellNode","addChild","on","EventType","TOUCH_END","event","onCellNodeClicked","propagationStopped","row","col","emit","EventName","CELL_CLICKED","shuffleArray","array","i","length","j","Math","floor","random","delay","ms","Promise","resolve","setTimeout","loadLevel","levelData","difficulty","levelIndex","initialBoard","value","grid","isPreset","presetMask","updateCellNode","push","initialHidePreset","gridCell","getComponent","updateDisplay","getNumberSpriteFrame","numberDisplayNode","getNumberDisplayNode","setScale","opacity","addComponent","revealPresetNumbersAnimated","delayBetweenMs","shuffledPresets","preset","getCellNode","animateNumberAppear","updateCellDisplay","highlightCell","deselectCell","setHighlight"],"mappings":"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","sourcesContent":["// assets/scripts/managers/GridManager.ts\n\nimport { _decorator, Component, Node, Prefab, instantiate, UITransform, error, warn, log, isValid, EventTouch,director ,UIOpacity} from 'cc';\nimport { Constants } from '../utils/Constants';\nimport { BoardData, LevelData, cloneBoardData } from '../data/GameData'; // 需要 BoardData 定义和克隆函数\nimport { UIManager } from './UIManager'; // 可能需要 UIManager 引用来获取资源\nimport { EffectsManager } from './EffectsManager'; // 引入 EffectsManager\nimport { GridCell } from '../components/GridCell';\n\nconst { ccclass, property } = _decorator;\n\n\n@ccclass('GridManager')\nexport class GridManager extends Component {\n\n    @property({ type: Prefab, tooltip: \"单个棋盘格子的预制件\" })\n    private cellPrefab: Prefab | null = null;\n\n    @property({ type: Node, tooltip: \"格子高亮效果节点 (可选, 如果高亮是附加在格子上的)\" })\n    private highlightNode: Node | null = null; // 另一种高亮方式：一个独立的节点移动到选中格子上\n\n    private _currentSelectedNode: Node | null = null;\n    // --- 内部状态 ---\n    private _gridCells: Node[][] = []; // 存储所有格子节点的二维数组\n    private _currentBoardData: BoardData | null = null; // 存储当前关卡的逻辑数据副本\n    private _isInitialized: boolean = false;\n    private _presetCellsToReveal: { row: number, col: number, value: number }[] = []; // 存储待显示的预设格子信息\n\n    // --- 依赖 ---\n    private uiManager: UIManager | null = null; // 用于获取 SpriteFrame 等资源\n    private effectsManager: EffectsManager | null = null; // 添加 EffectsManager 引用\n\n    // --- 初始化 ---\n    public initialize(uiManager: UIManager, effectsManager: EffectsManager): void {\n        console.log('[GridManager] Initializing...');\n        this.uiManager = uiManager;\n        this.effectsManager = effectsManager;\n        if (!this.cellPrefab) {\n            error('[GridManager] Cell Prefab 未设置!');\n            return;\n        }\n        if (!this.uiManager) {\n             error('[GridManager] UIManager instance is required!');\n             return;\n        }\n        if (!this.effectsManager) { // 检查 EffectsManager\n            error('[GridManager] EffectsManager instance is required!');\n            return;\n       }\n\n        this.createGridCells();\n        this._isInitialized = true;\n        console.log('[GridManager] Initialized successfully.');\n    }\n\n    /**\n     * 创建 9x9 的格子并添加到棋盘容器节点。\n     */\n    private createGridCells(): void {\n        console.log('[GridManager] Creating grid cells...');\n        this.node.removeAllChildren(); \n        this._gridCells = [];\n\n        const gridSize = Constants.GRID_SIZE;\n        for (let r = 0; r < gridSize; r++) {\n            this._gridCells[r] = [];\n            for (let c = 0; c < gridSize; c++) {\n                const cellNode = instantiate(this.cellPrefab!);\n                if (!cellNode) {\n                    error(`[GridManager] 实例化格子 (${r}, ${c}) 失败!`);\n                    continue;\n                }\n                this.node.addChild(cellNode);\n                this._gridCells[r][c] = cellNode;\n\n                cellNode.on(Node.EventType.TOUCH_END, (event: EventTouch) => {\n                    this.onCellNodeClicked(r, c);\n                    event.propagationStopped = true; \n                }, this);\n            }\n        }\n        console.log(`[GridManager] ${gridSize * gridSize} grid cells created.`);\n    }\n\n\n    private onCellNodeClicked(row: number, col: number): void {\n        console.log(`[GridManager] Cell node clicked: (${row}, ${col}). Emitting event.`);\n        director.emit(Constants.EventName.CELL_CLICKED, row, col);\n    }\n\n    /**\n     * 随机打乱数组 (Fisher-Yates Shuffle)。\n     * @param array 要打乱的数组。\n     * @private\n     */\n    private shuffleArray<T>(array: T[]): T[] {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]]; // ES6 交换元素\n        }\n        return array;\n    }\n\n    /**\n     * 创建一个延迟 Promise。\n     * @param ms 延迟的毫秒数。\n     * @private\n     */\n    private delay(ms: number): Promise<void> {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    // --- 数据加载与更新 ---\n\n    /**\n     * 加载关卡数据到棋盘。\n     * @param levelData 关卡数据。\n     * @returns 返回棋盘数据的克隆副本，供 InputManager 缓存。\n     */\n    public loadLevel(levelData: LevelData): BoardData | null {\n        if (!this._isInitialized) {\n            console.error('[GridManager] loadLevel 在初始化之前被调用。');\n            return null;\n        }\n        console.log(`[GridManager] Loading level: ${levelData.difficulty} - ${levelData.levelIndex}`);\n        console.log(`[GridManager] level data: ${levelData.initialBoard}`);\n        this._currentBoardData = cloneBoardData(levelData.initialBoard);\n        this._presetCellsToReveal = []; // 清空待显示列表\n\n        const gridSize = Constants.GRID_SIZE;\n        for (let r = 0; r < gridSize; r++) {\n            for (let c = 0; c < gridSize; c++) {\n                if (!this._gridCells[r] || !this._gridCells[r][c]) {\n                    warn(`[GridManager] 格子节点 (${r}, ${c}) 无效，跳过加载。`);\n                    continue;\n                }\n                const cellNode = this._gridCells[r][c];\n                const value = this._currentBoardData.grid[r][c];\n                const isPreset = this._currentBoardData.presetMask[r][c];\n                this.updateCellNode(cellNode, value, isPreset, true);\n\n                if (isPreset && value > 0) {\n                    this._presetCellsToReveal.push({ row: r, col: c, value: value });\n                }\n            }\n        }\n        console.log('[GridManager] Level loaded onto grid.');\n        // 返回克隆的数据给调用者（通常是 GameManager，再传给 InputManager）\n        return cloneBoardData(this._currentBoardData);\n    }\n\n    /**\n     * 更新单个格子节点的视觉表现（背景、数字）。\n     * 由 loadLevel 或 updateCellDisplay 调用。\n     * @param cellNode 要更新的格子节点。\n     * @param value 格子的数字 (0 表示空)。\n     * @param isPreset 是否是预设数字。\n     */\n    private updateCellNode(cellNode: Node, value: number, isPreset: boolean, initialHidePreset: boolean = false): void {\n        if (!isValid(cellNode) || !this.uiManager) return;\n\n        const gridCell = cellNode.getComponent(GridCell);\n        if (gridCell) {\n            gridCell.updateDisplay(value, isPreset, this.uiManager.getNumberSpriteFrame(value));\n\n            if (initialHidePreset && isPreset && value > 0) {\n                console.log(`[GridManager] 初始加载时隐藏预设数字: (${gridCell.row}, ${gridCell.col}) = ${value}`);\n                const numberDisplayNode = gridCell.getNumberDisplayNode();\n                if (numberDisplayNode) {\n                    numberDisplayNode.setScale(1, 1, 1);\n                    const opacity = numberDisplayNode.getComponent(UIOpacity) || numberDisplayNode.addComponent(UIOpacity);\n                    opacity.opacity = 255;\n                }\n            }\n        }\n    }\n\n    /**\n     * (新增) 播放预设数字逐个弹出的动画。\n     * @param delayBetweenMs 每个数字弹出之间的延迟（毫秒）。\n     * @returns 返回一个 Promise，在所有动画开始播放后（或完成后）解析。\n     */\n    public async revealPresetNumbersAnimated(delayBetweenMs: number = 50): Promise<void> {\n        if (!this._isInitialized || !this.effectsManager) {\n            warn('[GridManager] revealPresetNumbersAnimated 调用时未初始化或缺少 EffectsManager。');\n            return;\n        }\n        if (this._presetCellsToReveal.length === 0) {\n            log('[GridManager] 没有预设数字需要显示动画。');\n            return;\n        }\n\n        log(`[GridManager] 开始播放 ${this._presetCellsToReveal.length} 个预设数字的显示动画...`);\n\n        // 随机打乱顺序\n        const shuffledPresets = this.shuffleArray([...this._presetCellsToReveal]); // 复制一份再打乱\n\n        for (const preset of shuffledPresets) {\n            const cellNode = this.getCellNode(preset.row, preset.col);\n            if (isValid(cellNode)) {\n                let numberDisplayNode: Node | null = null;\n\n                // 获取数字节点 (优先使用 GridCell 组件)\n                const gridCell = cellNode.getComponent(GridCell);\n                if (gridCell) {\n                    gridCell.updateDisplay(preset.value, true, this.uiManager.getNumberSpriteFrame(preset.value));\n                    numberDisplayNode = gridCell.getNumberDisplayNode();\n                    if (numberDisplayNode) {\n                        this.effectsManager.animateNumberAppear(numberDisplayNode);\n                    } else {\n                         warn(`[GridManager] 未找到格子 (${preset.row}, ${preset.col}) 的 NumberDisplay 节点用于动画。`);\n                    }\n                }\n            } else {\n                 warn(`[GridManager] 未找到格子 (${preset.row}, ${preset.col}) 节点用于动画。`);\n            }\n\n            // 等待一小段时间再显示下一个\n            await this.delay(delayBetweenMs);\n        }\n\n        log('[GridManager] 所有预设数字动画已开始播放。');\n        this._presetCellsToReveal = []; // 清空列表\n    }\n\n    /**\n     * 由 InputManager 调用，用于更新特定格子的数字显示（通常是用户操作的结果）。\n     * @param row 行\n     * @param col 列\n     * @param value 新的数字 (0 表示清除)\n     * @param isPreset 理论上用户操作的都不是预设，但保留参数以防万一\n     */\n    public updateCellDisplay(row: number, col: number, value: number, isPreset: boolean): void {\n        if (!this._isInitialized) {\n            console.warn('[GridManager] updateCellDisplay 在初始化之前被调用。');\n            return;\n        }\n        if (row < 0 || row >= Constants.GRID_SIZE || col < 0 || col >= Constants.GRID_SIZE) {\n            console.error(`[GridManager] updateCellDisplay 收到无效的行列索引: (${row}, ${col})`);\n             return;\n         }\n         if (!this._gridCells[row] || !this._gridCells[row][col]) {\n            console.warn(`[GridManager] 格子节点 (${row}, ${col}) 无效，无法更新显示。`);\n             return;\n         }\n\n         const cellNode = this._gridCells[row][col];\n         console.log(`[GridManager] Updating cell display: (${row}, ${col}), ${isPreset} to ${value} `);\n         this.updateCellNode(cellNode, value, isPreset);\n    }\n\n\n    // --- 高亮控制 ---\n\n    /**\n     * 高亮显示指定的格子。\n     * @param row 行\n     * @param col 列\n     */\n    public highlightCell(row: number, col: number): void {\n        console.log(`[GridManager] Highlighting cell: (${row}, ${col})`);\n        if (!this._isInitialized) return;\n        if (row < 0 || row >= Constants.GRID_SIZE || col < 0 || col >= Constants.GRID_SIZE) return;\n\n        // 先取消之前的高亮\n        this.deselectCell();\n\n        // 方式一：激活格子内部的高亮节点\n        const cellNode = this._gridCells[row]?.[col];\n        if (isValid(cellNode)) {\n            cellNode.getComponent(GridCell)?.setHighlight(true);\n            if(cellNode.getComponent(GridCell) && cellNode.getComponent(GridCell).getComponent(UIOpacity)){\n                console.log(`[GridManager] 格子 (${row}, ${col}) 高亮节点已启用。${cellNode.getComponent(GridCell).getComponent(UIOpacity).opacity}`);\n            }\n            \n            this._currentSelectedNode = cellNode;\n        } else {\n            console.warn(`[GridManager] 未找到格子 (${row}, ${col}) 节点用于高亮。`);\n        }\n    }\n\n    /**\n     * 取消所有格子的高亮状态。\n     */\n    public deselectCell(): void {\n        console.log(`[GridManager] Deselecting current cell.`);\n        if (!this._isInitialized) return;\n        if (this._currentSelectedNode) {\n            this._currentSelectedNode.getComponent(GridCell)?.setHighlight(false);\n            this._currentSelectedNode = null;\n        }\n    }\n\n     /**\n     * 获取指定行列对应的格子节点。\n     * @param row 行\n     * @param col 列\n     * @returns 返回格子节点 Node，如果无效则返回 null。\n     */\n     public getCellNode(row: number, col: number): Node | null {\n         if (!this._isInitialized || row < 0 || row >= Constants.GRID_SIZE || col < 0 || col >= Constants.GRID_SIZE) {\n             return null;\n         }\n         return this._gridCells[row]?.[col] ?? null;\n     }\n}"]}