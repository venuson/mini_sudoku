{"version":3,"sources":["file:///Users/ruiwei/Documents/cocos/SudokuWechatGame/assets/scripts/managers/GameManager.ts"],"names":["_decorator","Component","director","log","warn","error","Constants","cloneBoardData","PersistenceManager","SudokuLogic","UIManager","GridManager","InputManager","AudioManager","EffectsManager","AccountManager","ccclass","property","GameState","GameManager","type","tooltip","_currentState","LOADING","_currentDifficulty","_currentLevelIndex","_currentLevelData","_currentGameTime","_timerIntervalId","_sudokuLogic","instance","_instance","onLoad","console","destroy","node","parent","addPersistRootNode","uiManager","GAME_OVER","gridManager","inputManager","audioManager","effectsManager","accountManager","getInstance","bindEvents","start","setGameState","settings","loadSettings","initialize","preloadAssets","login","savedGame","loadUnfinishedGame","shouldStartDefaultGame","currentUserId","getUserId","userId","continueSavedGame","clearUnfinishedGame","startNewGame","Difficulty","ENTRY","onDestroy","stopTimer","unbindEvents","on","EventName","DIFFICULTY_SELECTED","onDifficultySelected","onGameOver","PAUSE_RESUME_BUTTON_CLICKED","onPauseResumeClicked","SETTINGS_BUTTON_CLICKED","onSettingsClicked","SETTINGS_BGM_CHANGED","onBgmSettingChanged","SETTINGS_SFX_CHANGED","onSfxSettingChanged","SHOW_HISTORY_CLICKED","onShowHistory","SHOW_RANKING_CLICKED","onShowRanking","CHALLENGE_BUTTON_CLICKED","onChallengeClicked","LOGIN_SUCCESS","onLoginSuccess","targetOff","difficulty","MENU","highestCompletedRecord","findHighestCompletedLevel","startLevel","Math","min","levelIndex","LEVELS_PER_DIFFICULTY","isWin","PLAYING","LEVEL_COMPLETE","showWinAnimation","playSFX","AudioClipName","WIN","saveLevelResult","then","success","scheduleOnce","goToMenu","pauseGame","PAUSED","resumeGame","enabled","setBgmEnabled","bgmEnabled","saveSettings","setSfxEnabled","sfxEnabled","isLoggedIn","records","getAllLevelRecords","showHistoryPopup","rankingData","CloudService","fetchGlobalRanking","showRankingPopup","ranks","myRank","err","LOADING_LEVEL","closeAllPopups","stopWinEffect","loadLevelDataAsync","levelData","boardDataClone","loadLevel","reset","showGameUI","updateTimer","updatePauseResumeButton","startTimer","goToErrorState","catch","savedProgress","elapsedTime","pseudoLevelData","initialBoard","currentBoardState","emptyCellsCount","length","highestLevel","highestRecord","record","boardData","generateSudoku","emptyCount","r","GRID_SIZE","c","grid","showAd","adContainer","showAdOverlay","isPopupActive","settingsPopupPrefab","hideAdOverlay","prefab","name","showDifficultySelection","saveCurrentGame","getCurrentBoardData","progress","saveUnfinishedGame","setInterval","clearInterval","newState","onGameShow","resumeBGM","onGameHide","pauseBGM"],"mappings":"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","sourcesContent":["// assets/scripts/managers/GameManager.ts\n\nimport { _decorator, Component, Node, director, log, warn, error, isValid } from 'cc';\nimport { Constants, DifficultyType } from '../utils/Constants';\nimport { SettingsData } from '../data/SettingsData';\nimport { BoardData, LevelData, cloneBoardData } from '../data/GameData';\nimport { LocalUserProgress,LevelRecord } from '../data/UserData';\nimport { PersistenceManager } from '../services/PersistenceManager';\nimport { SudokuLogic } from '../logic/SudokuLogic';\nimport { UIManager } from './UIManager';\nimport { GridManager } from './GridManager';\nimport { InputManager } from './InputManager';\nimport { AudioManager } from './AudioManager';\nimport { EffectsManager } from './EffectsManager';\nimport { AccountManager } from './AccountManager';\nimport { AdManager } from './AdManager'; // AdManager 可能不需要直接交互，由 UIManager 控制\n\nconst { ccclass, property } = _decorator;\n\nenum GameState {\n    LOADING,        // 初始加载状态\n    MENU,           // 主菜单/难度选择状态\n    LOADING_LEVEL,  // 关卡加载中\n    PLAYING,        // 游戏中\n    PAUSED,         // 游戏暂停\n    LEVEL_COMPLETE, // 关卡完成（显示胜利效果）\n    GAME_OVER,      // 游戏彻底结束（暂未使用）\n}\n\n@ccclass('GameManager')\nexport class GameManager extends Component {\n    // --- Singleton Instance ---\n    private static _instance: GameManager | null = null;\n    public static get instance(): GameManager {\n        if (!GameManager._instance) {\n            error(\"[GameManager] 实例在初始化之前或节点不存在时被请求。\");\n        }\n        return GameManager._instance!;\n    }\n\n    // --- 管理器引用 (需要在编辑器中赋值) ---\n    @property({ type: UIManager, tooltip: \"UI 管理器实例\" })\n    private uiManager: UIManager | null = null;\n    @property({ type: GridManager, tooltip: \"棋盘管理器实例\" })\n    private gridManager: GridManager | null = null;\n    @property({ type: InputManager, tooltip: \"输入管理器实例\" })\n    private inputManager: InputManager | null = null;\n    @property({ type: AudioManager, tooltip: \"音频管理器实例\" })\n    private audioManager: AudioManager | null = null;\n    @property({ type: EffectsManager, tooltip: \"效果管理器实例\" })\n    private effectsManager: EffectsManager | null = null;\n    @property({ type: AccountManager, tooltip: \"账户管理器实例\" })\n    private accountManager: AccountManager | null = null;\n    // AdManager 通常由 UIManager 间接控制，GameManager 可能不需要直接引用\n    // @property(AdManager) private adManager: AdManager | null = null;\n\n    // --- 游戏状态 ---\n    private _currentState: GameState = GameState.LOADING;\n    private _currentDifficulty: DifficultyType | null = null;\n    private _currentLevelIndex: number = 0; // 当前关卡序号 (1-based)\n    private _currentLevelData: LevelData | null = null; // 当前关卡的完整数据\n    private _currentGameTime: number = 0; // 当前关卡已用时间 (秒)\n    private _timerIntervalId: number = -1; // 计时器 ID\n    private _sudokuLogic: SudokuLogic | null = null; // 数独逻辑实例\n\n    // --- Lifecycle Callbacks ---\n    protected onLoad(): void {\n        console.log('[GameManager] onLoad');\n        if (GameManager._instance && GameManager._instance !== this) {\n            warn('[GameManager] 另一个实例已存在，销毁当前实例。');\n            this.destroy();\n            return;\n        }\n        GameManager._instance = this;\n\n        // 设置为持久节点\n        if (this.node.parent) {\n            director.addPersistRootNode(this.node);\n            console.log('[GameManager] 节点已设为持久化。');\n        }\n\n        // 检查必要的管理器引用\n\n        if (!this.uiManager) {\n            error('[GameManager] 缺少必要的管理器引用uiManager，请在编辑器中设置！');\n            this._currentState = GameState.GAME_OVER; // 进入错误状态\n            return;\n        } if(!this.gridManager) { \n            error('[GameManager] 缺少必要的管理器引用gridManager，请在编辑器中设置！');\n            this._currentState = GameState.GAME_OVER; // 进入错误状态\n            return;\n        } if(!this.inputManager){\n            error('[GameManager] 缺少必要的管理器引用inputManager，请在编辑器中设置！');\n            this._currentState = GameState.GAME_OVER; // 进入错误状态\n            return;\n        } if( !this.audioManager){\n            error('[GameManager] 缺少必要的管理器引用audioManager，请在编辑器中设置！');\n            this._currentState = GameState.GAME_OVER; // 进入错误状态\n            return;\n        } if( !this.effectsManager) {\n            error('[GameManager] 缺少必要的管理器引用effectsManager，请在编辑器中设置！');\n            this._currentState = GameState.GAME_OVER; // 进入错误状态\n            return;\n        } if( !this.accountManager) {\n            error('[GameManager] 缺少必要的管理器引用accountManager，请在编辑器中设置！');\n            this._currentState = GameState.GAME_OVER; // 进入错误状态\n            return;\n        }\n\n        this._sudokuLogic = SudokuLogic.getInstance(); // 获取数独逻辑单例\n\n        // 绑定需要监听的事件\n        this.bindEvents();\n\n        console.log('[GameManager] 初始化完成，等待资源加载和登录...');\n    }\n\n    protected async start(): Promise<void> {\n        console.log('[GameManager] start - 开始初始化流程');\n        this.setGameState(GameState.LOADING);\n\n        // 1. 加载设置\n        const settings = PersistenceManager.loadSettings();\n        console.log('[GameManager] 设置已加载:', settings);\n\n        // 2. 初始化音频管理器并应用设置\n        await this.audioManager!.initialize(settings);\n\n        // 3. 初始化效果管理器\n        // EffectsManager 的 onLoad 已经初始化，这里可以不做额外操作\n\n\n        // 4. 初始化 UI 管理器并预加载资源\n        await this.uiManager!.preloadAssets(); // 等待 UI 资源加载完成\n        this.uiManager!.initialize(this.gridManager!, this.effectsManager!); // 传入依赖\n\n        // 5. 初始化棋盘管理器\n        this.gridManager!.initialize(this.uiManager!); // 传入依赖\n\n        // 6. 初始化输入管理器\n        this.inputManager!.initialize(this.gridManager!, this.uiManager!, this.audioManager!, this.effectsManager!); // 传入依赖\n\n        // 7. 初始化账户管理器 (AccountManager 的 onLoad 已初始化)\n\n        // 8. 尝试自动登录\n        await this.accountManager!.login(); // 等待登录流程完成\n\n        // 9. 检查是否有未完成的游戏\n        const savedGame = PersistenceManager.loadUnfinishedGame();\n        let shouldStartDefaultGame = true; // 默认需要开始新游戏\n        if (savedGame) {\n            // 检查存档是否属于当前用户 (如果已登录)\n            const currentUserId = this.accountManager!.getUserId();\n            // 如果未登录 (currentUserId 为 null)，则任何存档都视为无效或不属于当前匿名会话\n            // 如果已登录，则 userId 必须匹配\n            if (currentUserId !== null && savedGame.userId === currentUserId) {\n                log('[GameManager] 发现当前用户的游戏存档，尝试恢复...');\n                // TODO: (可选) 如果你想询问用户，可以在这里显示弹窗\n                // 如果用户选择继续，则调用 continueSavedGame 并设置 shouldStartDefaultGame = false\n                // 示例：直接继续游戏\n                this.continueSavedGame(savedGame);\n                shouldStartDefaultGame = false; // 成功恢复，不需要开始默认游戏\n            } else {\n                log('[GameManager] 发现无效或不匹配的游戏存档，将其忽略并清除。');\n                PersistenceManager.clearUnfinishedGame(); // 清理无效存档\n            }\n        } else {\n            log('[GameManager] 没有找到游戏存档。');\n        }\n\n        // 10. 如果没有成功恢复存档，则开始默认游戏\n        if (shouldStartDefaultGame) {\n            log('[GameManager] 开始默认游戏 (入门级第一关)。');\n            // 直接调用 startNewGame 开始入门第一关\n            this.startNewGame(Constants.Difficulty.ENTRY, 1); // <--- 直接开始默认关卡\n        }\n    }\n\n    protected onDestroy(): void {\n        console.log('[GameManager] onDestroy');\n        if (GameManager._instance === this) {\n            GameManager._instance = null;\n        }\n        this.stopTimer();\n        // 解绑事件\n        this.unbindEvents();\n    }\n\n    // --- 事件绑定与处理 ---\n    private bindEvents(): void {\n        console.log('[GameManager] Binding events...');\n        director.on(Constants.EventName.DIFFICULTY_SELECTED, this.onDifficultySelected, this);\n        director.on(Constants.EventName.GAME_OVER, this.onGameOver, this); // InputManager 发出\n        director.on(Constants.EventName.PAUSE_RESUME_BUTTON_CLICKED, this.onPauseResumeClicked, this);\n        director.on(Constants.EventName.SETTINGS_BUTTON_CLICKED, this.onSettingsClicked, this);\n        director.on(Constants.EventName.SETTINGS_BGM_CHANGED, this.onBgmSettingChanged, this);\n        director.on(Constants.EventName.SETTINGS_SFX_CHANGED, this.onSfxSettingChanged, this);\n        director.on(Constants.EventName.SHOW_HISTORY_CLICKED, this.onShowHistory, this);\n        director.on(Constants.EventName.SHOW_RANKING_CLICKED, this.onShowRanking, this);\n        director.on(Constants.EventName.CHALLENGE_BUTTON_CLICKED, this.onChallengeClicked, this);\n        // 监听登录成功事件，以便在登录后加载云端进度或记录\n        director.on(Constants.EventName.LOGIN_SUCCESS, this.onLoginSuccess, this);\n    }\n\n    private unbindEvents(): void {\n        console.log('[GameManager] Unbinding events...');\n        director.targetOff(this); // 移除所有以 this 为 target 的监听器\n    }\n\n    private onDifficultySelected(difficulty: DifficultyType): void {\n        if (this._currentState !== GameState.MENU) {\n            warn('[GameManager] 在非菜单状态下选择了难度，忽略。');\n            return;\n        }\n        console.log(`[GameManager] 难度选择事件: ${difficulty}`);\n        const highestCompletedRecord = this.findHighestCompletedLevel(difficulty);\n        const startLevel = highestCompletedRecord\n                           ? Math.min(highestCompletedRecord.levelIndex + 1, Constants.LEVELS_PER_DIFFICULTY)\n                           : 1; // 如果该难度从未玩过，从第一关开始\n\n        log(`[GameManager] 玩家在此难度最高完成至 ${highestCompletedRecord?.levelIndex ?? 0} 关，开始第 ${startLevel} 关。`);\n        this.startNewGame(difficulty, startLevel);\n    }\n\n    private onGameOver(isWin: boolean): void {\n        if (this._currentState !== GameState.PLAYING) return; // 只有在游戏中才能触发结束\n\n        console.log(`[GameManager] 游戏结束事件: isWin=${isWin}`);\n        this.stopTimer();\n\n        if (isWin) {\n            this.setGameState(GameState.LEVEL_COMPLETE);\n            this.uiManager?.showWinAnimation();\n            this.audioManager?.playSFX(Constants.AudioClipName.WIN);\n\n            // 保存游戏结果到云端\n            this.accountManager?.saveLevelResult(this._currentDifficulty!, this._currentLevelIndex, this._currentGameTime)\n                .then(success => {\n                    if (success) {\n                        console.log('[GameManager] 关卡结果成功保存到云端。');\n                    } else {\n                         warn('[GameManager] 关卡结果保存到云端失败。');\n                         // 可以考虑本地缓存或其他重试机制\n                    }\n                });\n\n            // 清除本地未完成存档\n            PersistenceManager.clearUnfinishedGame();\n\n            // 延迟一段时间后自动进入下一关或返回菜单\n            this.scheduleOnce(() => {\n                if (this._currentLevelIndex < Constants.LEVELS_PER_DIFFICULTY) {\n                    this.startNewGame(this._currentDifficulty!, this._currentLevelIndex + 1);\n                } else {\n                    console.log('[GameManager] 已完成当前难度的所有关卡！');\n                    // TODO: 提示用户已通关该难度，并返回菜单\n                    this.goToMenu();\n                }\n            }, 3.0); // 延迟 3 秒\n\n        } else {\n            // 失败逻辑 (目前数独没有明确的失败条件，除非是计时模式超时)\n            this.setGameState(GameState.GAME_OVER);\n            // TODO: 显示失败界面或提示\n            this.goToMenu(); // 暂时返回菜单\n        }\n    }\n\n    private onPauseResumeClicked(): void {\n        if (this._currentState === GameState.PLAYING) {\n            this.pauseGame();\n        } else if (this._currentState === GameState.PAUSED) {\n            this.resumeGame();\n        } else {\n            warn('[GameManager] 在非游戏或暂停状态下点击了暂停/恢复按钮。');\n        }\n    }\n\n    private onSettingsClicked(): void {\n        // 可以在暂停时打开设置，也可以在游戏时打开（会暂停游戏）\n        if (this._currentState === GameState.PLAYING) {\n            this.pauseGame(false); // 暂停游戏，但不显示广告层\n        }\n    }\n\n    private onBgmSettingChanged(enabled: boolean): void {\n        console.log(`[GameManager] BGM 设置改变: ${enabled}`);\n        this.audioManager?.setBgmEnabled(enabled);\n        // 保存设置\n        const settings = PersistenceManager.loadSettings();\n        settings.bgmEnabled = enabled;\n        PersistenceManager.saveSettings(settings);\n    }\n\n     private onSfxSettingChanged(enabled: boolean): void {\n        console.log(`[GameManager] SFX 设置改变: ${enabled}`);\n        this.audioManager?.setSfxEnabled(enabled);\n        // 保存设置\n        const settings = PersistenceManager.loadSettings();\n        settings.sfxEnabled = enabled;\n        PersistenceManager.saveSettings(settings);\n    }\n\n     private async onShowHistory(): Promise<void> {\n         if (!this.accountManager?.isLoggedIn()) {\n             warn('[GameManager] 用户未登录，无法显示历史记录。');\n             // TODO: 提示用户需要登录\n             return;\n         }\n         console.log('[GameManager] 请求显示历史记录...');\n         // 从 AccountManager 获取缓存的记录\n         const records = this.accountManager.getAllLevelRecords();\n         this.uiManager?.showHistoryPopup(records);\n     }\n\n     private async onShowRanking(): Promise<void> {\n         if (!this.accountManager?.isLoggedIn()) {\n             warn('[GameManager] 用户未登录，无法显示排行榜。');\n             // TODO: 提示用户需要登录\n             return;\n         }\n          console.log('[GameManager] 请求显示排行榜...');\n          try {\n              // 从 CloudService 获取排行榜数据\n              const rankingData = await CloudService.fetchGlobalRanking();\n              this.uiManager?.showRankingPopup(rankingData.ranks, rankingData.myRank);\n          } catch (err) {\n              error('[GameManager] 获取排行榜数据失败:', err);\n              // TODO: 显示错误提示\n          }\n     }\n\n     private onChallengeClicked(difficulty: DifficultyType, levelIndex: number): void {\n         console.log(`[GameManager] 重新挑战请求: ${difficulty} - ${levelIndex}`);\n         this.startNewGame(difficulty, levelIndex);\n     }\n\n     private onLoginSuccess(userId: string): void {\n         console.log(`[GameManager] 登录成功事件，用户 ID: ${userId}`);\n         // 登录成功后可以做一些事情，例如：\n         // 1. 如果之前有未完成的游戏，检查 userId 是否匹配\n         // 2. 如果当前在菜单界面，可以刷新显示的用户信息或记录入口状态\n         // 3. 如果有关卡数据需要从云端加载，可以在这里触发\n     }\n\n\n    // --- 游戏流程控制 ---\n\n    /**\n     * 开始一个新游戏关卡。\n     * @param difficulty 难度。\n     * @param levelIndex 关卡序号 (1-based)。\n     */\n    public startNewGame(difficulty: DifficultyType, levelIndex: number): void {\n        log(`[GameManager] 开始新游戏: ${difficulty} - ${levelIndex}`);\n        // 确保状态不是加载中，避免重复加载\n        if (this._currentState === GameState.LOADING_LEVEL) {\n            warn('[GameManager] 正在加载关卡中，请稍候...');\n            return;\n        }\n        this.setGameState(GameState.LOADING_LEVEL);\n        this.uiManager?.closeAllPopups();\n        this.effectsManager?.stopWinEffect();\n\n        this._currentDifficulty = difficulty;\n        this._currentLevelIndex = levelIndex;\n        this._currentGameTime = 0;\n\n        // 异步生成或加载关卡数据\n        this.loadLevelDataAsync(difficulty, levelIndex).then(levelData => {\n            if (levelData) {\n                this._currentLevelData = levelData;\n                const boardDataClone = this.gridManager!.loadLevel(levelData);\n                if (boardDataClone) {\n                    this.inputManager!.reset(boardDataClone);\n                    // --- 确保游戏 UI 显示 ---\n                    this.uiManager?.showGameUI(); // <--- 确保调用\n                    this.uiManager?.updateTimer(this._currentGameTime);\n                    this.uiManager?.updatePauseResumeButton(false); // 确保按钮是暂停状态\n                    this.startTimer();\n                    this.setGameState(GameState.PLAYING);\n                    log('[GameManager] 关卡加载完成，游戏开始！');\n                } else {\n                     error('[GameManager] 棋盘管理器加载关卡失败！');\n                     this.goToErrorState(); // 进入错误状态或返回菜单\n                }\n            } else {\n                error(`[GameManager] 无法加载关卡数据: ${difficulty} - ${levelIndex}`);\n                this.goToErrorState();\n            }\n        }).catch(err => {\n             error('[GameManager] 加载关卡数据时发生错误:', err);\n             this.goToErrorState();\n        });\n    }\n\n    /**\n     * 继续之前保存的游戏。\n     * @param savedProgress 本地存储的进度数据。\n     */\n    private continueSavedGame(savedProgress: LocalUserProgress): void {\n        log('[GameManager] 继续已保存的游戏...');\n        // 确保状态不是加载中\n        if (this._currentState === GameState.LOADING_LEVEL) {\n             warn('[GameManager] 正在加载关卡中，无法同时恢复游戏。');\n             return;\n        }\n        this.setGameState(GameState.LOADING_LEVEL);\n        this.uiManager?.closeAllPopups();\n        this.effectsManager?.stopWinEffect();\n\n        this._currentDifficulty = savedProgress.difficulty;\n        this._currentLevelIndex = savedProgress.levelIndex;\n        this._currentGameTime = savedProgress.elapsedTime;\n\n        const pseudoLevelData: LevelData = {\n            difficulty: savedProgress.difficulty,\n            levelIndex: savedProgress.levelIndex,\n            initialBoard: savedProgress.currentBoardState,\n            emptyCellsCount: 0\n        };\n\n        const boardDataClone = this.gridManager!.loadLevel(pseudoLevelData);\n        if (boardDataClone) {\n            this.inputManager!.reset(cloneBoardData(savedProgress.currentBoardState));\n            // --- 确保游戏 UI 显示 ---\n            this.uiManager?.showGameUI(); // <--- 确保调用\n            this.uiManager?.updateTimer(this._currentGameTime);\n            this.uiManager?.updatePauseResumeButton(false); // 确保按钮是暂停状态\n            this.startTimer();\n            this.setGameState(GameState.PLAYING);\n            log('[GameManager] 已恢复游戏进度。');\n        } else {\n             error('[GameManager] 棋盘管理器加载已保存的游戏失败！');\n             PersistenceManager.clearUnfinishedGame();\n             this.goToErrorState(); // 进入错误状态或返回菜单\n        }\n    }\n\n    // --- 辅助方法 ---\n    /**\n     * 查找指定难度下已完成的最高关卡记录。\n     * @param difficulty 难度。\n     * @returns 返回最高关卡的 LevelRecord，如果该难度没有记录则返回 null。\n     */\n    private findHighestCompletedLevel(difficulty: DifficultyType): LevelRecord | null {\n        const records = this.accountManager?.getAllLevelRecords();\n        if (!records || records.length === 0) {\n            return null;\n        }\n\n        let highestLevel = 0;\n        let highestRecord: LevelRecord | null = null;\n\n        for (const record of records) {\n            if (record.difficulty === difficulty && record.levelIndex > highestLevel) {\n                highestLevel = record.levelIndex;\n                highestRecord = record;\n            }\n        }\n        return highestRecord;\n    }\n\n    /**\n     * 进入错误状态或返回菜单 (用于处理加载失败等情况)。\n     */\n    private goToErrorState(): void {\n        // 可以选择显示一个错误提示，然后返回菜单\n        // 或者直接返回菜单\n        this.goToMenu();\n    }\n\n    /**\n     * 异步加载关卡数据。优先尝试从 SudokuLogic 生成，可以扩展为从云端获取。\n     */\n    private async loadLevelDataAsync(difficulty: DifficultyType, levelIndex: number): Promise<LevelData | null> {\n        console.log(`[GameManager] 异步加载关卡数据: ${difficulty} - ${levelIndex}`);\n        \n\n        // 方案一：本地生成\n        const boardData = this._sudokuLogic!.generateSudoku(difficulty, levelIndex);\n        if (boardData) {\n            // 计算空格数\n            let emptyCount = 0;\n            for (let r = 0; r < Constants.GRID_SIZE; r++) {\n                for (let c = 0; c < Constants.GRID_SIZE; c++) {\n                    if (boardData.grid[r][c] === 0) {\n                        emptyCount++;\n                    }\n                }\n            }\n            const levelData: LevelData = {\n                difficulty: difficulty,\n                levelIndex: levelIndex,\n                initialBoard: boardData,\n                emptyCellsCount: emptyCount\n            };\n            return levelData;\n        } else {\n            return null; // 生成失败\n        }\n\n        // 方案二：从云端获取 (如果需要)\n        /*\n        try {\n            const levelData = await CloudService.fetchLevelData(difficulty, levelIndex);\n            return levelData;\n        } catch (err) {\n            error(`[GameManager] 从云端获取关卡数据失败: ${difficulty}-${levelIndex}`, err);\n            return null;\n        }\n        */\n    }\n\n    /**\n     * 暂停游戏。\n     * @param showAd 是否显示广告层，默认为 true。\n     */\n    public pauseGame(showAd: boolean = true): void {\n        if (this._currentState !== GameState.PLAYING) return;\n        console.log(`[GameManager] 暂停游戏. Show ad: ${showAd}`);\n        this.setGameState(GameState.PAUSED);\n        this.stopTimer();\n        // this.audioManager?.pauseBGM(); // 暂停背景音乐\n        this.uiManager?.updatePauseResumeButton(true); \n\n        if (showAd) {\n            const adContainer = this.uiManager?.showAdOverlay();\n        }\n    }\n\n    /**\n     * 恢复游戏。\n     */\n    public resumeGame(): void {\n        // 只有从暂停状态或设置弹窗打开的状态才能恢复\n        if (this._currentState !== GameState.PAUSED && !this.isPopupActive(this.settingsPopupPrefab)) {\n             warn(`[GameManager] 无法从当前状态 ${this._currentState} 恢复游戏。`);\n             return;\n        }\n\n        console.log('[GameManager] 恢复游戏。');\n        this.uiManager?.closeAllPopups(); // 关闭可能打开的设置弹窗\n        this.uiManager?.hideAdOverlay(); // 隐藏广告层\n        // director.emit(Constants.EventName.HIDE_AD); // 通知 AdManager 隐藏广告\n\n        this.setGameState(GameState.PLAYING);\n        this.startTimer();\n\n        // this.audioManager?.resumeBGM();\n        this.uiManager?.updatePauseResumeButton(false);\n    }\n\n     /**\n     * 检查是否有指定类型的弹窗处于活动状态。\n     * @param prefab 弹窗的 Prefab。\n     */\n    private isPopupActive(prefab: Prefab | null): boolean {\n        if (!prefab) return false;\n        return this.uiManager?.isPopupActive(prefab.name) ?? false; // 需要 UIManager 提供此接口\n    }\n\n\n    /**\n     * 返回主菜单/难度选择界面。\n     */\n    public goToMenu(): void {\n        console.log('[GameManager] 返回主菜单。');\n        // 只有在非菜单状态下才执行切换逻辑\n        if (this._currentState !== GameState.MENU) {\n            this.setGameState(GameState.MENU);\n            this.stopTimer();\n            // this.audioManager?.playBGM(Constants.AudioClipName.MENU_BGM); // 播放菜单 BGM\n            this.uiManager?.showDifficultySelection(); // <--- 显示难度选择界面\n            this._currentDifficulty = null;\n            this._currentLevelIndex = 0;\n            this._currentLevelData = null;\n            // 清理存档的逻辑可以根据需要添加或移除\n            // PersistenceManager.clearUnfinishedGame();\n        }\n    }\n\n    /**\n     * 保存当前游戏状态到本地 (用于中途退出)。\n     */\n    private saveCurrentGame(): void {\n        if (this._currentState !== GameState.PLAYING && this._currentState !== GameState.PAUSED) {\n            // console.log('[GameManager] 当前非游戏状态，无需保存。');\n            return;\n        }\n        if (!this._currentDifficulty || !this._currentLevelData || !this.inputManager?.getCurrentBoardData()) {\n            warn('[GameManager] 缺少必要数据，无法保存当前游戏。');\n            return;\n        }\n\n        const progress: LocalUserProgress = {\n            userId: this.accountManager?.getUserId() || null,\n            difficulty: this._currentDifficulty,\n            levelIndex: this._currentLevelIndex,\n            currentBoardState: cloneBoardData(this.inputManager.getCurrentBoardData()), // 获取 InputManager 当前的棋盘状态副本\n            elapsedTime: this._currentGameTime\n        };\n        PersistenceManager.saveUnfinishedGame(progress);\n        console.log('[GameManager] 当前游戏状态已保存到本地。');\n    }\n\n    // --- 计时器 ---\n    private startTimer(): void {\n        this.stopTimer(); // 先停止旧的计时器\n        console.log('[GameManager] 启动计时器。');\n        this._timerIntervalId = setInterval(() => {\n            this._currentGameTime++;\n            this.uiManager?.updateTimer(this._currentGameTime);\n        }, 1000);\n    }\n\n    private stopTimer(): void {\n        if (this._timerIntervalId !== -1) {\n            console.log('[GameManager] 停止计时器。');\n            clearInterval(this._timerIntervalId);\n            this._timerIntervalId = -1;\n        }\n    }\n\n    // --- 状态管理 ---\n    private setGameState(newState: GameState): void {\n        if (this._currentState === newState) return;\n        console.log(`[GameManager] 状态改变: ${GameState[this._currentState]} -> ${GameState[newState]}`);\n        this._currentState = newState;\n        // 可以在这里根据状态变化执行一些通用逻辑\n        // 例如，离开 PLAYING 或 PAUSED 状态时自动保存游戏\n        if (newState !== GameState.PLAYING && newState !== GameState.PAUSED) {\n             this.saveCurrentGame();\n        }\n    }\n\n    // --- 小游戏生命周期回调 ---\n    // Cocos Creator 默认不直接处理小游戏 onShow/onHide，\n    // 需要在 app.js 或入口脚本中监听并调用 GameManager 的方法。\n    /**\n     * 处理小游戏切换到前台的事件。\n     */\n    public onGameShow(): void {\n        console.log('[GameManager] 游戏切换到前台 (onShow)');\n        // 如果之前是暂停状态（因为切换到后台），则恢复游戏\n        // 需要一个标记来判断是否是因为切后台导致的暂停\n        // if (this._pausedByHide) {\n        //     this.resumeGame();\n        //     this._pausedByHide = false;\n        // }\n        // 或者简单地恢复 BGM\n        if (this._currentState === GameState.PLAYING || this._currentState === GameState.PAUSED) {\n             this.audioManager?.resumeBGM();\n        }\n    }\n\n    /**\n     * 处理小游戏切换到后台的事件。\n     */\n    public onGameHide(): void {\n        console.log('[GameManager] 游戏切换到后台 (onHide)');\n        // 自动暂停游戏并保存进度\n        if (this._currentState === GameState.PLAYING) {\n            // this._pausedByHide = true; // 设置标记\n            this.pauseGame(false); // 暂停游戏，不显示广告\n            this.saveCurrentGame(); // 保存进度\n        } else if (this._currentState === GameState.PAUSED) {\n             // 如果已经是暂停状态，确保进度已保存\n             this.saveCurrentGame();\n        }\n         // 暂停 BGM\n         this.audioManager?.pauseBGM();\n    }\n}\n\n// --- 在 app.js 或入口脚本中添加监听 ---\n/*\n// app.js\nimport { GameManager } from './assets/scripts/managers/GameManager'; // 假设路径正确\n\nApp({\n  onLaunch() {\n    // ... wx.cloud.init ...\n  },\n  onShow() {\n    console.console.log('App onShow');\n    // 确保 GameManager 实例已创建\n    if (GameManager.instance) {\n      GameManager.instance.onGameShow();\n    }\n  },\n  onHide() {\n    console.console.log('App onHide');\n    // 确保 GameManager 实例已创建\n    if (GameManager.instance) {\n      GameManager.instance.onGameHide();\n    }\n  }\n})\n*/\n\n/**\n Singleton & Persistence: 标准实现。\n管理器引用: 使用 @property 暴露了对其他核心管理器的引用，需要在编辑器中正确链接。\n游戏状态机 (GameState): 定义了一个枚举 GameState 来管理游戏的不同阶段，并通过 _currentState 变量跟踪当前状态。setGameState 方法用于安全地切换状态并记录日志。\n核心状态变量:\n_currentDifficulty, _currentLevelIndex, _currentLevelData: 存储当前关卡的信息。\n_currentGameTime: 记录当前关卡的游戏时间。\n_timerIntervalId: 用于管理计时器的 setInterval ID。\n初始化流程 (onLoad, start):\nonLoad 负责单例设置、持久化和检查引用。\nstart 是核心初始化入口，按顺序执行：加载设置 -> 初始化 AudioManager -> 初始化 EffectsManager -> 初始化 UIManager 并加载资源 -> 初始化 GridManager -> 初始化 InputManager -> 初始化 AccountManager -> 尝试自动登录 -> 检查并恢复存档或进入菜单。使用了 async/await 来处理异步操作。\n事件驱动: 通过 bindEvents 和 unbindEvents 监听和解绑来自其他模块的关键事件，如难度选择、游戏结束、按钮点击、设置更改等。事件处理函数 (onDifficultySelected, onGameOver, etc.) 负责根据事件触发相应的游戏流程。\n游戏流程控制方法:\nstartNewGame: 处理开始新关卡的逻辑，包括加载数据、重置管理器、切换 UI、启动计时器。\ncontinueSavedGame: 处理恢复已保存游戏的逻辑，加载存档数据并恢复游戏状态。\nloadLevelDataAsync: 封装了加载关卡数据的逻辑（目前是本地生成，可扩展为云端获取）。\npauseGame, resumeGame: 处理游戏的暂停和恢复，包括计时器、音频、UI 状态和广告层的控制。\ngoToMenu: 处理返回主菜单的逻辑。\nsaveCurrentGame: 将当前游戏状态（难度、关卡、棋盘、时间）保存到本地存储。\n计时器 (startTimer, stopTimer): 使用 setInterval 实现秒级计时器，并更新 UI 显示。\n小游戏生命周期 (onGameShow, onGameHide): 提供了处理微信小游戏切换前后台事件的方法。注意： 这些方法需要你在小程序的 app.js 或其他入口脚本中监听 wx.onShow 和 wx.onHide 并调用 GameManager.instance 的对应方法来实现。代码末尾提供了 app.js 的示例。\n错误处理与日志: 在关键流程和异步操作中添加了日志和错误处理。\nGameManager 是所有模块的粘合剂，它的逻辑相对复杂，因为它需要协调所有其他部分。请仔细检查其状态转换、事件处理和与其他管理器的交互逻辑。\n*/"]}