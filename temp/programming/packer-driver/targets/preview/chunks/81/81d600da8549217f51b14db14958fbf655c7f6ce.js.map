{"version":3,"sources":["file:///Users/ruiwei/Documents/cocos/SudokuWechatGame/assets/scripts/data/UserData.ts"],"names":["createEmptyUserAccount","userId","levelRecords","totalLevelsCompleted","generateLevelRecordKey","difficulty","levelIndex"],"mappings":";;;;;AAyIA;AACA;AACA;AACA;AACA;AACO,WAASA,sBAAT,CAAgCC,MAAhC,EAA6D;AAChE,WAAO;AACHA,MAAAA,MAAM,EAAEA,MADL;AAEHC,MAAAA,YAAY,EAAE,EAFX;AAGHC,MAAAA,oBAAoB,EAAE,CAHnB,CAIH;;AAJG,KAAP;AAMH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,WAASC,sBAAT,CAAgCC,UAAhC,EAA4DC,UAA5D,EAAwF;AAC3F,WAAUD,UAAV,SAAwBC,UAAxB;AACH;;;;;;;;;;;4BAjBeN,sB;4BAeAI;;;;;;;;;;;;gFA5JwB;;AAExC;AACA;AACA;;AA0BA;AACA;AACA;;AA2CA;AACA;AACA;;AA4BA;AACA;AACA","sourcesContent":["import { Constants, DifficultyType } from \"../utils/Constants\";\nimport { BoardData } from \"./GameData\"; // Import BoardData for LocalUserProgress\n\n/**\n * @description 定义单个已通关关卡的记录结构 (通常存储在云端)。\n */\nexport interface LevelRecord {\n    /**\n     * 关卡难度。\n     */\n    difficulty: DifficultyType;\n\n    /**\n     * 关卡序号 (1-30)。\n     */\n    levelIndex: number;\n\n    /**\n     * 完成该关卡的个人最佳用时 (单位：秒)。\n     */\n    bestTimeSeconds: number;\n\n    /**\n     * 首次完成该关卡的日期时间戳 (例如 Date.now() 或服务器时间)。\n     */\n    firstCompletionTimestamp: number;\n\n    // 可以添加最后完成日期等信息\n    // lastCompletionTimestamp?: number;\n}\n\n/**\n * @description 定义用户账户的核心数据结构 (通常存储在云端)。\n */\nexport interface UserAccount {\n    /**\n     * 用户唯一标识符 (通常是微信的 openid)。\n     * 作为数据库主键。\n     */\n    userId: string; // Corresponds to _id in some databases like MongoDB\n\n    /**\n     * 用户昵称 (需要用户授权获取)。\n     * 可选。\n     */\n    nickname?: string;\n\n    /**\n     * 用户头像 URL (需要用户授权获取)。\n     * 可选。\n     */\n    avatarUrl?: string;\n\n    /**\n     * 用户所有已通关的关卡记录。\n     * 可以使用数组存储，或者使用 Map/Object 结构方便按 难度-关卡 查找。\n     * 示例：使用 Map，键为 \"难度-关卡序号\" (e.g., \"入门-1\", \"初级-15\")。\n     */\n    levelRecords: { [key: string]: LevelRecord }; // Map<string, LevelRecord> in concept\n\n    /**\n     * 用户总共完成的关卡数量。\n     * (冗余字段，方便快速查询和排名)。\n     */\n    totalLevelsCompleted: number;\n\n    /**\n     * 用户最后登录时间戳。\n     * 可选。\n     */\n    lastLoginTimestamp?: number;\n\n    // 可以添加其他统计信息，如平均用时等\n    // averageTimeSeconds?: number;\n}\n\n/**\n * @description 定义排行榜单个条目的数据结构 (从云端获取)。\n */\nexport interface RankingEntry {\n    /**\n     * 排名序号。\n     */\n    rank: number;\n\n    /**\n     * 用户 ID。\n     */\n    userId: string;\n\n    /**\n     * 用户昵称。\n     */\n    nickname: string; // 通常排行榜需要显示昵称\n\n    /**\n     * 用户头像 URL。\n     */\n    avatarUrl: string; // 通常排行榜需要显示头像\n\n    /**\n     * 用于排名的分数或指标 (例如：总通关数)。\n     */\n    score: number;\n}\n\n/**\n * @description 定义本地存储的、未完成的游戏进度数据结构。\n */\nexport interface LocalUserProgress {\n    /**\n     * 与该进度关联的用户 ID。\n     * 如果用户未登录时保存，则可能为 null 或特定标识。\n     */\n    userId: string | null;\n\n    /**\n     * 未完成游戏的难度。\n     */\n    difficulty: DifficultyType;\n\n    /**\n     * 未完成游戏的关卡序号。\n     */\n    levelIndex: number;\n\n    /**\n     * 退出时棋盘的完整状态 (包括用户已填入的数字)。\n     */\n    currentBoardState: BoardData;\n\n    /**\n     * 退出时已经过的游戏时间 (单位：秒)。\n     */\n    elapsedTime: number;\n}\n\n/**\n * @description (辅助函数) 创建一个空的 UserAccount 对象。\n * @param userId 用户 ID\n * @returns 返回一个初始化的 UserAccount 对象\n */\nexport function createEmptyUserAccount(userId: string): UserAccount {\n    return {\n        userId: userId,\n        levelRecords: {},\n        totalLevelsCompleted: 0,\n        // nickname 和 avatarUrl 需要后续授权获取\n    };\n}\n\n/**\n * @description (辅助函数) 生成 LevelRecord 的 key\n * @param difficulty 难度\n * @param levelIndex 关卡序号\n * @returns 返回 \"难度-关卡序号\" 格式的字符串\n */\nexport function generateLevelRecordKey(difficulty: DifficultyType, levelIndex: number): string {\n    return `${difficulty}-${levelIndex}`;\n}"]}