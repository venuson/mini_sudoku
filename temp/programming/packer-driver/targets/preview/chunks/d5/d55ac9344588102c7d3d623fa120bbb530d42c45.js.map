{"version":3,"sources":["file:///Users/ruiwei/Documents/cocos/SudokuWechatGame/assets/scripts/components/GridCell.ts"],"names":["_decorator","Component","Node","Sprite","Color","ccclass","property","GridCell","type","tooltip","_row","_col","_isPreset","_currentValue","init","row","col","value","isPreset","updateDisplay","numberFrame","presetColor","numberDisplayNode","numSprite","getComponent","active","console","log","spriteFrame","color","warn","setHighlight","highlightSprite","node","getNumberDisplayNode","onDestroy"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Sprite, Label, Button, error, log, isValid,Color } from 'cc';\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('GridCell')\nexport class GridCell extends Component {\n\n    @property({ type: Sprite, tooltip: \"背景 Sprite 组件\" })\n    private bgSprite: Sprite | null = null;\n\n    @property({ type: Node, tooltip: \"用于显示数字的节点 (可以是 Sprite 或 Label)\" })\n    private numberDisplayNode: Node | null = null;\n\n    @property({ type: Sprite, tooltip: \"高亮状态的 Sprite 组件 (可选)\" })\n    private highlightSprite: Sprite | null = null;\n\n    // --- 格子自身属性 ---\n    private _row: number = -1;\n    private _col: number = -1;\n    private _isPreset: boolean = false;\n    private _currentValue: number = 0;\n\n    // --- 初始化 ---\n    /**\n     * 初始化格子组件。\n     * 通常由 GridManager 在创建格子时调用。\n     * @param row 格子的行索引 (0-8)。\n     * @param col 格子的列索引 (0-8)。\n     */\n    public init(row: number, col: number): void {\n        this._row = row;\n        this._col = col;\n    }\n\n    // --- 公共方法 ---\n\n    /**\n     * 获取格子的行索引。\n     */\n    public get row(): number {\n        return this._row;\n    }\n\n    /**\n     * 获取格子的列索引。\n     */\n    public get col(): number {\n        return this._col;\n    }\n\n    /**\n     * 获取格子当前显示的数值。\n     */\n    public get value(): number {\n        return this._currentValue;\n    }\n\n    /**\n     * 获取格子是否是预设数字。\n     */\n    public get isPreset(): boolean {\n        return this._isPreset;\n    }\n\n    /**\n     * 更新格子的显示状态。\n     * (这个方法可以替代 GridManager 中的 updateCellNode 部分逻辑，让 GridManager 调用此方法)\n     * @param value 新的数值 (0-9)。\n     * @param isPreset 是否是预设。\n     * @param bgFrame 背景 SpriteFrame。\n     * @param numberFrame 数字 SpriteFrame (如果用 Sprite 显示)。\n     * @param presetColor 预设数字颜色 (如果用 Label 或需要区分 Sprite 颜色)。\n     * @param userColor 用户输入数字颜色。\n     */\n    public updateDisplay(\n        value: number,\n        isPreset: boolean,\n        numberFrame: SpriteFrame | null\n    ): void {\n        this._currentValue = value;\n        this._isPreset = isPreset;\n        let presetColor: Color = new Color(0xcc, 0xcc, 0xcc, 255);\n\n        // 更新数字\n        if (this.numberDisplayNode) {\n            const numSprite = this.numberDisplayNode.getComponent(Sprite);\n            if (value > 0) {\n                this.numberDisplayNode.active = true;\n                console.log(`[GridCell] 更新数字: ${value}，预设: ${isPreset}`);\n                if (numSprite && numberFrame) { // 优先使用 Sprite\n                    numSprite.spriteFrame = numberFrame;\n                    if (isPreset) {\n                        numSprite.color = presetColor;\n                    } \n                } else {\n                    console.warn(`[GridCell] 未找到数字显示组件 (Sprite 或 Label)。`);\n                    // this.numberDisplayNode.active = false;\n                }\n            } else {\n                // numSprite.spriteFrame = null;\n                console.log(`[GridCell] 清除数字: ${value}`);\n                this.numberDisplayNode.active = false; \n            }\n        }\n\n        // 隐藏高亮\n        // this.setHighlight(false);\n    }\n\n    /**\n     * 设置格子的高亮状态。\n     * @param active 是否激活高亮。\n     */\n    public setHighlight(active: boolean): void {\n        if (this.highlightSprite) {\n            this.highlightSprite.node.active = active;\n        }\n        // 如果高亮是改变背景颜色或边框，在这里处理\n    }\n\n    /**\n     * 获取数字显示节点的引用，用于动画。\n     */\n    public getNumberDisplayNode(): Node | null {\n        return this.numberDisplayNode;\n    }\n\n    // --- (可选) 点击事件处理 ---\n    // private onClick(): void {\n    //     if (this._row === -1 || this._col === -1) return;\n    //     log(`[GridCell] Clicked: (${this._row}, ${this._col})`);\n    //     // 发射事件，携带行列信息\n    //     director.emit(Constants.EventName.CELL_CLICKED, this._row, this._col);\n    // }\n\n    protected onDestroy(): void {\n        // 移除事件监听 (如果在这里添加了的话)\n        // this.node.off(Node.EventType.TOUCH_END, this.onClick, this);\n    }\n}\n\n/*\n节点引用: 使用 @property 获取预制件内部的背景、数字显示节点和高亮节点的引用。\n自身属性: 存储了格子的行列号 (_row, _col)、是否预设 (_isPreset) 和当前值 (_currentValue)。\ninit 方法: 提供一个初始化方法，供 GridManager 在创建格子时调用，传入行列号。\nGetter 方法: 提供了获取格子属性的 getter 方法。\nupdateDisplay 方法: 封装了更新格子视觉表现的核心逻辑，包括设置背景、显示/隐藏数字（支持 Sprite 或 Label）、设置颜色等。GridManager 可以调用这个方法来更新格子，而不是直接操作格子的子节点。\nsetHighlight 方法: 控制格子的高亮状态（如果高亮效果是格子的一部分）。\ngetNumberDisplayNode 方法: 提供获取数字显示节点的接口，方便 UIManager 或 EffectsManager 获取动画目标。\n点击事件 (注释掉): 代码中包含了可选的点击事件处理逻辑。如果选择在 GridCell 组件内部处理点击并发出事件，可以取消注释这部分代码，并移除 GridManager 中的相应监听逻辑。目前的设计是由 GridManager 统一处理点击。\n请检查 GridCell.ts 文件。这个组件虽然可选，但有助于将格子的状态和显示逻辑封装在一起，使 GridManager 的代码更简洁。\n*/"]}