{"version":3,"sources":["file:///Users/ruiwei/Documents/cocos/SudokuWechatGame/assets/scripts/components/NumberButton.ts"],"names":["_decorator","Component","Button","Label","Color","find","ccclass","property","NumberButton","type","tooltip","Number","_buttonComponent","validNumberColor","RED","invalidNumberColor","GRAY","defaultNumberColor","BLACK","onLoad","getComponent","console","log","node","name","numberLabel","labelNode","warn","buttonNumber","getNumber","setNumber","num","string","toString","setState","isValid","interactable","targetNumberColor","color"],"mappings":";;;;;;;;;;;;;;;;AACSA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,M,OAAAA,M;AAAgBC,MAAAA,K,OAAAA,K;AAAYC,MAAAA,K,OAAAA,K;AAA+BC,MAAAA,I,OAAAA,I;;;;;oFADjG;;;AACmH;;;OAG7G;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBP,U;;8BAEjBQ,Y,WADZF,OAAO,CAAC,cAAD,C,UAMHC,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEN,KAAR;AAAeO,QAAAA,OAAO,EAAE;AAAxB,OAAD,C,UAGRH,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEE,MAAR;AAAgBD,QAAAA,OAAO,EAAE;AAAzB,OAAD,C,2BATb,MACaF,YADb,SACkCP,SADlC,CAC4C;AAAA;AAAA;;AAExC;AAEA;AAJwC;;AAME;AANF;;AAAA,eAWhCW,gBAXgC,GAWE,IAXF;AAYxC;AAEA;AAdwC,eAevBC,gBAfuB,GAeGT,KAAK,CAACU,GAfT;AAegB;AAfhB,eAgBvBC,kBAhBuB,GAgBKX,KAAK,CAACY,IAhBX;AAgBiB;AAhBjB,eAiBvBC,kBAjBuB,GAiBKb,KAAK,CAACc,KAjBX;AAAA;;AAiBkB;AAEhDC,QAAAA,MAAM,GAAS;AACrB,eAAKP,gBAAL,GAAwB,KAAKQ,YAAL,CAAkBlB,MAAlB,CAAxB;;AACA,cAAI,CAAC,KAAKU,gBAAV,EAA4B;AACxBS,YAAAA,OAAO,CAACC,GAAR,kCAAiC,KAAKC,IAAL,CAAUC,IAA3C;AACH,WAJoB,CAMrB;;;AACA,cAAI,CAAC,KAAKC,WAAV,EAAuB;AACnB,gBAAMC,SAAS,GAAGrB,IAAI,CAAC,OAAD,EAAU,KAAKkB,IAAf,CAAtB,CADmB,CACyB;;AAC5C,gBAAIG,SAAJ,EAAe;AACX,mBAAKD,WAAL,GAAmBC,SAAS,CAACN,YAAV,CAAuBjB,KAAvB,CAAnB;AACH;AACJ;;AACD,cAAI,CAAC,KAAKsB,WAAV,EAAuB;AACnBJ,YAAAA,OAAO,CAACM,IAAR,oBAA8B,KAAKC,YAAnC;AACH;AACJ;;AAEMC,QAAAA,SAAS,GAAW;AACvB,iBAAO,KAAKD,YAAZ;AACH;;AAEME,QAAAA,SAAS,CAACC,GAAD,EAAoB;AAChC;AACA,cAAI,KAAKN,WAAT,EAAsB;AAClBJ,YAAAA,OAAO,CAACC,GAAR,oBAA6B,KAAKM,YAAlC,oCAAyDG,GAAzD;AACA,iBAAKN,WAAL,CAAiBO,MAAjB,GAA0BD,GAAG,GAAG,CAAN,GAAUA,GAAG,CAACE,QAAJ,EAAV,GAA2B,EAArD;AACH,WAHD,MAGO;AACHZ,YAAAA,OAAO,CAACM,IAAR,oBAA8B,KAAKC,YAAnC;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACWM,QAAAA,QAAQ,CAACC,OAAD,EAAyB;AACpC,cAAI,KAAKvB,gBAAT,EAA2B;AACvB,iBAAKA,gBAAL,CAAsBwB,YAAtB,GAAqCD,OAArC;AACH,WAHmC,CAKpC;;;AACA,cAAIE,iBAAJ;AACAA,UAAAA,iBAAiB,GAAGF,OAAO,GAAG,KAAKtB,gBAAR,GAA2B,KAAKE,kBAA3D,CAPoC,CAO2C;;AAE/E,cAAI,KAAKU,WAAT,EAAsB;AAClB,iBAAKA,WAAL,CAAiBa,KAAjB,GAAyBD,iBAAzB;AACH,WAXmC,CAapC;;AACH,SAxEuC,CA0ExC;;;AA1EwC,O;;;;;iBAMJ,I;;;;;;;iBAGL,C;;;AAoEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// assets/scripts/components/NumberButton.ts\nimport { _decorator, Component, Node, Button, Sprite, Label, log, Color, UIOpacity, SpriteFrame, find } from 'cc'; // 引入 find\nimport { Constants } from '../utils/Constants';\n\nconst { ccclass, property } = _decorator;\n@ccclass('NumberButton')\nexport class NumberButton extends Component {\n\n    // 不再需要 bgSprite 的 @property，因为背景由 Button 组件管理\n\n    // 获取 Label 组件的引用\n    @property({ type: Label, tooltip: \"显示数字的 Label 组件 (通常在按钮子节点上)\" })\n    private numberLabel: Label | null = null; // **确保在 Prefab 中链接此属性**\n\n    @property({ type: Number, tooltip: \"此按钮代表的数字 (1-9)\" })\n    private buttonNumber: number = 0;\n\n    private _buttonComponent: Button | null = null;\n    // 不再需要 _uiOpacity，Button 的 Disabled 状态会处理视觉\n\n    // --- 预设的视觉参数 ---\n    private readonly validNumberColor: Color = Color.RED;   // 有效数字显示为红色\n    private readonly invalidNumberColor: Color = Color.GRAY; // 无效数字显示为灰色\n    private readonly defaultNumberColor: Color = Color.BLACK; // 默认数字颜色 (例如，未选中格子时)\n\n    protected onLoad(): void {\n        this._buttonComponent = this.getComponent(Button);\n        if (!this._buttonComponent) {\n            console.log(`[NumberButton] 节点 ${this.node.name} 未找到 Button 组件。`);\n        }\n\n        // 如果 Label 没有在编辑器中链接，尝试查找名为 \"Label\" 的子节点\n        if (!this.numberLabel) {\n            const labelNode = find(\"Label\", this.node); // 查找名为 \"Label\" 的子节点\n            if (labelNode) {\n                this.numberLabel = labelNode.getComponent(Label);\n            }\n        }\n        if (!this.numberLabel) {\n            console.warn(`[NumberButton ${this.buttonNumber}] 未能找到或链接 Label 组件用于显示数字。`);\n        }\n    }\n\n    public getNumber(): number {\n        return this.buttonNumber;\n    }\n\n    public setNumber(num: number): void {\n        // 更新 Label 显示的数字\n        if (this.numberLabel) {\n            console.log(`[NumberButton ${this.buttonNumber}] 设置数字: ${num}`);\n            this.numberLabel.string = num > 0 ? num.toString() : '';\n        } else {\n            console.warn(`[NumberButton ${this.buttonNumber}] 未找到 Label 组件用于设置数字。`);\n        }\n    }\n\n    /**\n     * 设置按钮的有效状态和数字标签颜色。\n     * 背景由 Button 组件根据 interactable 状态自动处理。\n     * 由 UIManager 调用。\n     * @param isValid 数字是否有效 (即是否可以合法填入选中格子)。\n     * @param isCellSelected 当前是否有格子被选中。\n     */\n    public setState(isValid: boolean): void { \n        if (this._buttonComponent) {\n            this._buttonComponent.interactable = isValid;\n        }\n\n        // 2. 设置按钮上数字的颜色\n        let targetNumberColor: Color;\n        targetNumberColor = isValid ? this.validNumberColor : this.invalidNumberColor; // 选中时：有效为红，无效为灰\n\n        if (this.numberLabel) {\n            this.numberLabel.color = targetNumberColor;\n        }\n\n        // 3. 背景和透明度由 Button 组件的 Transition 和 Disabled 状态自动处理，无需手动设置\n    }\n\n    // ... (可选的 onClick 和 onDestroy) ...\n}\n\n/*\n节点引用: 获取按钮背景 Sprite 的引用。\nbuttonNumber 属性: 存储该按钮代表的数字，需要在编辑器中为每个按钮实例设置正确的值（1 到 9）。\ngetNumber, setNumber: 提供获取和设置按钮数字的方法。\nsetState 方法: 封装了根据有效性状态更新按钮视觉表现（背景 SpriteFrame、可交互性、透明度）的逻辑。UIManager 可以调用此方法来更新每个数字按钮的状态，而不是直接操作按钮的子节点和组件。这使得 UIManager 的代码更简洁。\n点击事件 (注释掉): 同样包含了可选的内部点击处理逻辑。当前设计是由 UIManager 统一监听和处理所有按钮的点击事件。\n这个 NumberButton.ts 组件主要是为了更好地组织按钮自身的属性和状态更新逻辑。如果你的数字按钮非常简单，也可以不使用这个组件，完全由 UIManager 来控制。\n*/"]}