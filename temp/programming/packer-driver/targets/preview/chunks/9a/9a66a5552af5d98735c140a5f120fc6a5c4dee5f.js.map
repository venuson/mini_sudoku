{"version":3,"sources":["file:///Users/ruiwei/Documents/cocos/SudokuWechatGame/assets/scripts/components/RankItem.ts"],"names":["_decorator","Component","Label","Sprite","SpriteFrame","assetManager","isValid","Color","error","ccclass","property","RankItem","type","tooltip","_rankData","_isMyRank","_defaultAvatarFrame","setData","rankData","isMyRank","defaultAvatar","console","log","node","active","rankLabel","string","rank","color","WHITE","topRankSprite","rank1Color","rank2Color","rank3Color","nicknameLabel","nickname","scoreLabel","score","loadAvatar","avatarUrl","bgSprite","getComponent","myRankBgColor","avatarSprite","loadRemote","ext","err","imageAsset","setDefaultAvatar","spriteFrame","createWithImage","GRAY","warn","RED","ORANGE","YELLOW"],"mappings":"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","sourcesContent":["// assets/scripts/components/RankItem.ts\n\nimport { _decorator, Component, Node, Label, Sprite, SpriteFrame, assetManager, ImageAsset, isValid, Color, log, error } from 'cc';\nimport { RankingEntry } from '../data/UserData'; // 需要 RankingEntry 接口定义\nimport { Constants } from '../utils/Constants'; // 可能需要默认头像名称\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('RankItem')\nexport class RankItem extends Component {\n\n    @property({ type: Label, tooltip: \"显示排名的 Label\" })\n    private rankLabel: Label | null = null;\n\n    @property({ type: Sprite, tooltip: \"显示用户头像的 Sprite\" })\n    private avatarSprite: Sprite | null = null;\n\n    @property({ type: Label, tooltip: \"显示用户昵称的 Label\" })\n    private nicknameLabel: Label | null = null;\n\n    @property({ type: Label, tooltip: \"显示分数的 Label\" })\n    private scoreLabel: Label | null = null;\n\n    // --- (可选) 用于区分前三名或自己的样式 ---\n    @property({ type: Sprite, tooltip: \"排名前三的特殊图标或背景 (可选)\" })\n    private topRankSprite: Sprite | null = null;\n    @property({ type: Color, tooltip: \"第一名的颜色 (可选)\" })\n    private rank1Color: Color = Color.RED;\n    @property({ type: Color, tooltip: \"第二名的颜色 (可选)\" })\n    private rank2Color: Color = Color.ORANGE;\n    @property({ type: Color, tooltip: \"第三名的颜色 (可选)\" })\n    private rank3Color: Color = Color.YELLOW;\n    @property({ type: Color, tooltip: \"用户自己排名的背景色 (可选)\" })\n    private myRankBgColor: Color = new Color(200, 230, 255); // 淡蓝色\n\n    // --- 内部状态 ---\n    private _rankData: RankingEntry | null = null;\n    private _isMyRank: boolean = false; // 标记是否是当前用户的条目\n    private _defaultAvatarFrame: SpriteFrame | null = null; // 缓存默认头像\n\n    /**\n     * 设置并显示排行榜条目数据。\n     * 由 UIManager 在填充列表时调用。\n     * @param rankData 排行榜条目数据。\n     * @param isMyRank 是否是当前用户的排名项。\n     * @param defaultAvatar (可选) 预加载的默认头像 SpriteFrame。\n     */\n    public setData(rankData: RankingEntry, isMyRank: boolean, defaultAvatar?: SpriteFrame | null): void {\n        this._rankData = rankData;\n        this._isMyRank = isMyRank;\n        this._defaultAvatarFrame = defaultAvatar ?? this._defaultAvatarFrame; // 更新或使用已缓存的\n\n        if (!rankData) {\n            console.log('[RankItem] 设置了空的排行数据。');\n            this.node.active = false;\n            return;\n        }\n\n        this.node.active = true;\n\n        // 更新排名显示和样式\n        if (this.rankLabel) {\n            this.rankLabel.string = `${rankData.rank}`;\n            // 根据排名设置特殊颜色或图标\n            this.rankLabel.color = Color.WHITE; // 重置为默认颜色\n            if (this.topRankSprite) this.topRankSprite.node.active = false; // 隐藏特殊图标\n\n            if (rankData.rank === 1) {\n                this.rankLabel.color = this.rank1Color;\n                // if (this.topRankSprite) this.topRankSprite.node.active = true; // 显示第一名图标\n            } else if (rankData.rank === 2) {\n                this.rankLabel.color = this.rank2Color;\n                // if (this.topRankSprite) this.topRankSprite.node.active = true; // 显示第二名图标\n            } else if (rankData.rank === 3) {\n                this.rankLabel.color = this.rank3Color;\n                // if (this.topRankSprite) this.topRankSprite.node.active = true; // 显示第三名图标\n            }\n        }\n\n        // 更新昵称\n        if (this.nicknameLabel) {\n            this.nicknameLabel.string = rankData.nickname || '匿名用户';\n        }\n\n        // 更新分数 (假设分数是通关数)\n        if (this.scoreLabel) {\n            this.scoreLabel.string = `通关: ${rankData.score}`;\n        }\n\n        // 更新头像\n        this.loadAvatar(rankData.avatarUrl);\n\n        // 如果是当前用户的排名，设置特殊背景色 (可选)\n        const bgSprite = this.getComponent(Sprite); // 假设背景 Sprite 在根节点\n        if (bgSprite) {\n            bgSprite.color = isMyRank ? this.myRankBgColor : Color.WHITE; // 或者其他默认背景色\n        }\n    }\n\n    /**\n     * 加载并设置用户头像。\n     * @param avatarUrl 头像的 URL。\n     */\n    private loadAvatar(avatarUrl: string | null | undefined): void {\n        if (!this.avatarSprite) return;\n\n        if (avatarUrl) {\n            // 注意：微信小游戏加载远程图片需要配置 downloadFile 合法域名\n            assetManager.loadRemote<ImageAsset>(avatarUrl, { ext: '.png' }, (err, imageAsset) => {\n                // 检查组件和节点是否仍然有效，因为加载是异步的\n                if (isValid(this.node) && isValid(this.avatarSprite)) {\n                    if (err || !imageAsset) {\n                        error(`[RankItem] 加载头像失败: ${avatarUrl}`, err);\n                        // 加载失败，设置默认头像\n                        this.setDefaultAvatar();\n                    } else {\n                        const spriteFrame = SpriteFrame.createWithImage(imageAsset);\n                        this.avatarSprite.spriteFrame = spriteFrame;\n                    }\n                } else {\n                     console.log('[RankItem] 加载头像完成时节点或 Sprite 已销毁。');\n                }\n            });\n        } else {\n            // 没有头像 URL，设置默认头像\n            this.setDefaultAvatar();\n        }\n    }\n\n    /**\n     * 设置默认头像。\n     */\n    private setDefaultAvatar(): void {\n        if (this.avatarSprite) {\n            if (this._defaultAvatarFrame) {\n                this.avatarSprite.spriteFrame = this._defaultAvatarFrame;\n            } else {\n                // 如果没有缓存的默认头像，可以尝试从 UIManager 或资源管理器加载\n                // 或者显示一个纯色块\n                this.avatarSprite.spriteFrame = null; // 清空\n                this.avatarSprite.color = Color.GRAY;\n                warn('[RankItem] 未能设置默认头像。');\n            }\n        }\n    }\n\n    // RankItem 通常不需要 onDestroy 来解绑事件，因为它主要是显示数据\n    // protected onDestroy(): void {\n    // }\n}\n\n/*\n节点引用: 获取排名、头像、昵称、分数等 Label 和 Sprite 的引用。还包括了可选的用于前三名特殊显示的 topRankSprite 和颜色属性。\n_rankData, _isMyRank: 存储传递给该项的 RankingEntry 数据和是否为当前用户的标记。\n_defaultAvatarFrame: 用于缓存从 UIManager 传入或加载的默认头像 SpriteFrame。\nsetData 方法:\n核心方法，由 UIManager 调用。\n接收 RankingEntry 数据、isMyRank 标记和可选的默认头像。\n更新排名 Label，并根据排名（1、2、3）设置不同的颜色或激活特殊图标（如果配置了）。\n更新昵称和分数 Label。\n调用 loadAvatar 方法加载用户头像。\n如果 isMyRank 为 true，设置不同的背景色以突出显示。\nloadAvatar 方法:\n负责异步加载远程头像 URL。\n特别注意: 微信小游戏加载远程图片需要在微信公众平台后台配置 downloadFile 的合法域名。\n使用 assetManager.loadRemote 加载图片资源 (ImageAsset)。\n加载成功后，使用 SpriteFrame.createWithImage 创建 SpriteFrame 并设置给 avatarSprite。\n包含有效性检查: 在异步回调中，使用 isValid(this.node) 和 isValid(this.avatarSprite) 检查节点和组件是否在加载完成时仍然存在，防止报错。\n加载失败或 URL 为空时，调用 setDefaultAvatar。\nsetDefaultAvatar 方法: 设置预加载或缓存的默认头像 SpriteFrame。如果默认头像也未加载，则清空 SpriteFrame 并显示灰色背景。\n*/"]}