{"version":3,"sources":["file:///Users/ruiwei/Documents/cocos/SudokuWechatGame/assets/scripts/managers/GridManager.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","UITransform","error","warn","isValid","director","Constants","cloneBoardData","GridCell","ccclass","property","GridManager","type","tooltip","_currentSelectedNode","_gridCells","_currentBoardData","_isInitialized","_cellWidth","_cellHeight","uiManager","initialize","console","log","cellPrefab","createGridCells","node","removeAllChildren","gridSize","GRID_SIZE","r","cellNode","c","addChild","on","EventType","TOUCH_END","event","onCellNodeClicked","propagationStopped","uiTransform","getComponent","width","height","row","col","emit","EventName","CELL_CLICKED","loadLevel","levelData","difficulty","levelIndex","initialBoard","value","grid","isPreset","presetMask","updateCellNode","gridCell","updateDisplay","getNumberSpriteFrame","updateCellDisplay","highlightCell","deselectCell","highlightSpriteNode","getChildByName","active","getCellNode"],"mappings":"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","sourcesContent":["// assets/scripts/managers/GridManager.ts\n\nimport { _decorator, Component, Node, Prefab, instantiate, Sprite, Label, Button, UITransform, Color, error, warn, log, isValid, SpriteFrame, resources,director } from 'cc';\nimport { Constants } from '../utils/Constants';\nimport { BoardData, LevelData, cloneBoardData } from '../data/GameData'; // 需要 BoardData 定义和克隆函数\nimport { UIManager } from './UIManager'; // 可能需要 UIManager 引用来获取资源\nimport { GridCell } from '../components/GridCell';\n\nconst { ccclass, property } = _decorator;\n\n// (可选) 定义格子组件，如果格子本身逻辑复杂\n// @ccclass('GridCellComponent')\n// export class GridCellComponent extends Component {\n//     @property(Sprite) bgSprite: Sprite | null = null;\n//     @property(Node) numberDisplayNode: Node | null = null; // 可以是 Sprite 或 Label\n//     @property(Sprite) highlightSprite: Sprite | null = null;\n//     public row: number = -1;\n//     public col: number = -1;\n//     // ... 其他格子特有逻辑\n// }\n\n@ccclass('GridManager')\nexport class GridManager extends Component {\n\n    @property({ type: Prefab, tooltip: \"单个棋盘格子的预制件\" })\n    private cellPrefab: Prefab | null = null;\n\n    @property({ type: Node, tooltip: \"格子高亮效果节点 (可选, 如果高亮是附加在格子上的)\" })\n    private highlightNode: Node | null = null; // 另一种高亮方式：一个独立的节点移动到选中格子上\n\n    private _currentSelectedNode: Node | null = null;\n    // --- 内部状态 ---\n    private _gridCells: Node[][] = []; // 存储所有格子节点的二维数组\n    private _currentBoardData: BoardData | null = null; // 存储当前关卡的逻辑数据副本\n    private _isInitialized: boolean = false;\n    private _cellWidth: number = 0; // 缓存计算出的格子宽度\n    private _cellHeight: number = 0; // 缓存计算出的格子高度\n\n    // --- 依赖 ---\n    private uiManager: UIManager | null = null; // 用于获取 SpriteFrame 等资源\n\n    // --- 初始化 ---\n    public initialize(uiManager: UIManager): void {\n        console.log('[GridManager] Initializing...');\n        this.uiManager = uiManager;\n        if (!this.cellPrefab) {\n            error('[GridManager] Cell Prefab 未设置!');\n            return;\n        }\n        if (!this.uiManager) {\n             error('[GridManager] UIManager instance is required!');\n             return;\n        }\n\n        this.createGridCells();\n        this._isInitialized = true;\n        console.log('[GridManager] Initialized successfully.');\n    }\n\n    /**\n     * 创建 9x9 的格子并添加到棋盘容器节点。\n     */\n    private createGridCells(): void {\n        console.log('[GridManager] Creating grid cells...');\n        this.node.removeAllChildren(); // 清除旧格子（如果需要重新创建）\n        this._gridCells = [];\n\n        const gridSize = Constants.GRID_SIZE;\n        for (let r = 0; r < gridSize; r++) {\n            this._gridCells[r] = [];\n            for (let c = 0; c < gridSize; c++) {\n                const cellNode = instantiate(this.cellPrefab!);\n                if (!cellNode) {\n                    error(`[GridManager] 实例化格子 (${r}, ${c}) 失败!`);\n                    continue;\n                }\n                this.node.addChild(cellNode);\n                this._gridCells[r][c] = cellNode;\n\n                // --- 添加点击事件监听 ---\n                cellNode.on(Node.EventType.TOUCH_END, (event: EventTouch) => {\n                    // 可以在这里添加一些触摸判断逻辑，例如触摸点是否在节点内\n                    this.onCellNodeClicked(r, c);\n                    event.propagationStopped = true; // 阻止事件冒泡到父节点\n                }, this);\n\n                // 缓存格子尺寸 (假设所有格子尺寸相同)\n                if (r === 0 && c === 0) {\n                    const uiTransform = cellNode.getComponent(UITransform);\n                    if (uiTransform) {\n                        this._cellWidth = uiTransform.width;\n                        this._cellHeight = uiTransform.height;\n                        console.log(`[GridManager] 格子尺寸: ${this._cellWidth}x${this._cellHeight}`);\n                    }\n                }\n            }\n        }\n        console.log(`[GridManager] ${gridSize * gridSize} grid cells created.`);\n    }\n\n    /**\n     * 处理格子节点的点击事件，将事件转发给 InputManager。\n     * @param row 被点击的行\n     * @param col 被点击的列\n     */\n    \n    private onCellNodeClicked(row: number, col: number): void {\n        console.log(`[GridManager] Cell node clicked: (${row}, ${col}). Emitting event.`);\n        // 使用 director 发布全局事件，InputManager 会监听\n        director.emit(Constants.EventName.CELL_CLICKED, row, col);\n    }\n\n    // --- 数据加载与更新 ---\n\n    /**\n     * 加载关卡数据到棋盘。\n     * @param levelData 关卡数据。\n     * @returns 返回棋盘数据的克隆副本，供 InputManager 缓存。\n     */\n    public loadLevel(levelData: LevelData): BoardData | null {\n        if (!this._isInitialized) {\n            console.error('[GridManager] loadLevel 在初始化之前被调用。');\n            return null;\n        }\n        console.log(`[GridManager] Loading level: ${levelData.difficulty} - ${levelData.levelIndex}`);\n        console.log(`[GridManager] level data: ${levelData.initialBoard}`);\n        // **非常重要**: 克隆棋盘数据，GridManager 只持有显示相关的数据副本\n        this._currentBoardData = cloneBoardData(levelData.initialBoard);\n        \n\n        const gridSize = Constants.GRID_SIZE;\n        for (let r = 0; r < gridSize; r++) {\n            for (let c = 0; c < gridSize; c++) {\n                if (!this._gridCells[r] || !this._gridCells[r][c]) {\n                    warn(`[GridManager] 格子节点 (${r}, ${c}) 无效，跳过加载。`);\n                    continue;\n                }\n                const cellNode = this._gridCells[r][c];\n                const value = this._currentBoardData.grid[r][c];\n                const isPreset = this._currentBoardData.presetMask[r][c];\n                this.updateCellNode(cellNode, value, isPreset);\n            }\n        }\n        console.log('[GridManager] Level loaded onto grid.');\n        // 返回克隆的数据给调用者（通常是 GameManager，再传给 InputManager）\n        return cloneBoardData(this._currentBoardData);\n    }\n\n    /**\n     * 更新单个格子节点的视觉表现（背景、数字）。\n     * 由 loadLevel 或 updateCellDisplay 调用。\n     * @param cellNode 要更新的格子节点。\n     * @param value 格子的数字 (0 表示空)。\n     * @param isPreset 是否是预设数字。\n     */\n    private updateCellNode(cellNode: Node, value: number, isPreset: boolean): void {\n        if (!isValid(cellNode) || !this.uiManager) return;\n\n        const gridCell = cellNode.getComponent(GridCell);\n        if (gridCell) {\n            gridCell.updateDisplay(value, isPreset, this.uiManager.getNumberSpriteFrame(value));\n        }\n\n    }\n\n    /**\n     * 由 InputManager 调用，用于更新特定格子的数字显示（通常是用户操作的结果）。\n     * @param row 行\n     * @param col 列\n     * @param value 新的数字 (0 表示清除)\n     * @param isPreset 理论上用户操作的都不是预设，但保留参数以防万一\n     */\n    public updateCellDisplay(row: number, col: number, value: number, isPreset: boolean): void {\n         if (!this._isInitialized) {\n            console.warn('[GridManager] updateCellDisplay 在初始化之前被调用。');\n            return;\n        }\n         if (row < 0 || row >= Constants.GRID_SIZE || col < 0 || col >= Constants.GRID_SIZE) {\n            console.error(`[GridManager] updateCellDisplay 收到无效的行列索引: (${row}, ${col})`);\n             return;\n         }\n         if (!this._gridCells[row] || !this._gridCells[row][col]) {\n            console.warn(`[GridManager] 格子节点 (${row}, ${col}) 无效，无法更新显示。`);\n             return;\n         }\n\n         const cellNode = this._gridCells[row][col];\n         console.log(`[GridManager] Updating cell display: (${row}, ${col}), ${isPreset} to ${value} `);\n         this.updateCellNode(cellNode, value, isPreset);\n    }\n\n\n    // --- 高亮控制 ---\n\n    /**\n     * 高亮显示指定的格子。\n     * @param row 行\n     * @param col 列\n     */\n    public highlightCell(row: number, col: number): void {\n        if (!this._isInitialized) return;\n        if (row < 0 || row >= Constants.GRID_SIZE || col < 0 || col >= Constants.GRID_SIZE) return;\n\n        // 先取消之前的高亮\n        this.deselectCell();\n\n        // 方式一：激活格子内部的高亮节点\n        const cellNode = this._gridCells[row]?.[col];\n        if (isValid(cellNode)) {\n            const highlightSpriteNode = cellNode.getChildByName('HighlightSprite');\n            if (highlightSpriteNode) {\n                highlightSpriteNode.active = true;\n                this._currentSelectedNode = cellNode;\n            }\n        }\n\n        // 方式二：移动独立的高亮节点到目标位置\n        // if (this.highlightNode && this._gridCells[row]?.[col]) {\n        //      const targetCellNode = this._gridCells[row][col];\n        //      this.highlightNode.setPosition(targetCellNode.position);\n        //      this.highlightNode.active = true;\n        // }\n         console.log(`[GridManager] Cell highlighted: (${row}, ${col})`);\n    }\n\n    /**\n     * 取消所有格子的高亮状态。\n     */\n    public deselectCell(): void {\n        if (!this._isInitialized) return;\n\n        if (this._currentSelectedNode) {\n            const highlightSpriteNode = this._currentSelectedNode.getChildByName('HighlightSprite');\n            if (highlightSpriteNode) {\n                highlightSpriteNode.active = false;\n                this._currentSelectedNode = null;\n            }\n        }\n    }\n\n     /**\n     * 获取指定行列对应的格子节点。\n     * @param row 行\n     * @param col 列\n     * @returns 返回格子节点 Node，如果无效则返回 null。\n     */\n     public getCellNode(row: number, col: number): Node | null {\n         if (!this._isInitialized || row < 0 || row >= Constants.GRID_SIZE || col < 0 || col >= Constants.GRID_SIZE) {\n             return null;\n         }\n         return this._gridCells[row]?.[col] ?? null;\n     }\n}"]}