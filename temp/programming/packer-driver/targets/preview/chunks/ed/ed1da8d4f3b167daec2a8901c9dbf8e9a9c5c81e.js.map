{"version":3,"sources":["file:///Users/ruiwei/Documents/cocos/SudokuWechatGame/assets/scripts/managers/AccountManager.ts"],"names":["_decorator","Component","director","warn","error","sys","Constants","CloudService","createEmptyUserAccount","generateLevelRecordKey","ccclass","property","AccountManager","_isInitialized","_isLoggingIn","_isLoggedIn","_userId","_userAccount","_isNewUser","instance","_instance","onLoad","console","log","destroy","node","parent","addPersistRootNode","onDestroy","login","forceRefresh","platform","toLowerCase","includes","emit","EventName","LOGIN_SUCCESS","loginRes","wxLogin","code","Error","authResult","authenticateUser","userId","isNewUser","fetchUserAccountData","err","LOGIN_FAIL","isLoggedIn","getUserId","getUserAccount","getLevelRecord","difficulty","levelIndex","levelRecords","key","getAllLevelRecords","Object","values","saveLevelResult","timeSeconds","completionTimestamp","Date","now","updateUserRecord","existingRecord","isNewCompletion","bestTimeSeconds","firstCompletionTimestamp","totalLevelsCompleted","USER_RECORDS_UPDATED","Promise","resolve","wx","success","res","fail","recordsMap","fetchUserRecords","account","keys","length","tryFetchWxUserInfo","nickname","avatarUrl","getUserProfile","desc","userInfo","nickName"],"mappings":"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","sourcesContent":["// assets/scripts/managers/AccountManager.ts\n\nimport { _decorator, Component, Node, director, log, warn, error, sys } from 'cc';\nimport { Constants, DifficultyType } from '../utils/Constants';\nimport { CloudService } from '../services/CloudService'; // 依赖 CloudService\nimport { UserAccount, LevelRecord, createEmptyUserAccount,generateLevelRecordKey } from '../data/UserData';\n\nconst { ccclass, property } = _decorator;\n\n// 微信 API 类型定义 (简化版)\ndeclare const wx: any;\n\ninterface WxLoginSuccessResult {\n    code: string;\n    errMsg: string;\n}\n\ninterface WxLoginErrorResult {\n    errMsg: string;\n}\n\ninterface WxGetUserInfoSuccessResult {\n    userInfo: {\n        nickName: string;\n        avatarUrl: string;\n        // ... 其他字段 gender, city, province, country\n    };\n    rawData: string;\n    signature: string;\n    encryptedData: string;\n    iv: string;\n    errMsg: string;\n}\n\ninterface WxGetUserInfoErrorResult {\n    errMsg: string;\n}\n\n\n@ccclass('AccountManager')\nexport class AccountManager extends Component {\n    // --- Singleton Instance ---\n    private static _instance: AccountManager | null = null;\n    public static get instance(): AccountManager {\n        if (!this._instance) {\n            error(\"[AccountManager] 实例在初始化之前或节点不存在时被请求。\");\n        }\n        return this._instance!;\n    }\n\n    // --- 内部状态 ---\n    private _isInitialized: boolean = false;\n    private _isLoggingIn: boolean = false; // 防止重复登录\n    private _isLoggedIn: boolean = false;\n    private _userId: string | null = null; // openid\n    private _userAccount: UserAccount | null = null; // 缓存从云端获取的用户账户信息\n    private _isNewUser: boolean = false; // 标记是否是新用户\n\n    // --- Lifecycle Callbacks ---\n    protected onLoad(): void {\n        console.log('[AccountManager] onLoad');\n        if (AccountManager._instance && AccountManager._instance !== this) {\n            warn('[AccountManager] 另一个实例已存在，销毁当前实例。');\n            this.destroy();\n            return;\n        }\n        AccountManager._instance = this;\n\n        // 设置为持久节点\n        if (this.node.parent) {\n            director.addPersistRootNode(this.node);\n            console.log('[AccountManager] 节点已设为持久化。');\n        }\n\n        this._isInitialized = true;\n        console.log('[AccountManager] 初始化完成。');\n\n        // 可以在初始化时尝试自动登录\n        // this.login();\n    }\n\n    protected onDestroy(): void {\n        console.log('[AccountManager] onDestroy');\n        if (AccountManager._instance === this) {\n            AccountManager._instance = null;\n        }\n        // 清理状态\n        this._isLoggedIn = false;\n        this._userId = null;\n        this._userAccount = null;\n    }\n\n    // --- 公共接口 ---\n\n    /**\n     * 尝试进行用户登录和认证。\n     * 如果已经在登录中或已登录，则直接返回。\n     * @param forceRefresh (可选) 是否强制重新从云端拉取用户信息，默认为 false。\n     * @returns Promise<boolean> 登录是否成功。\n     */\n    public async login(forceRefresh: boolean = false): Promise<boolean> {\n        if (!this._isInitialized) {\n            warn('[AccountManager] login 在初始化之前被调用。');\n            return false;\n        }\n        if (this._isLoggingIn) {\n            warn('[AccountManager] 正在登录中，请稍候...');\n            // 可以返回一个正在进行的 Promise，或者简单返回 false\n            return false;\n        }\n        if (this._isLoggedIn && !forceRefresh) {\n            console.log('[AccountManager] 用户已登录。');\n            return true;\n        }\n\n        // 检查是否在微信平台\n        if (!sys.platform.toLowerCase().includes('wechat')) {\n            warn('[AccountManager] 非微信平台，跳过登录流程。');\n            // 可以模拟一个游客登录状态\n            this._isLoggedIn = false; // 或者设为 true 代表游客登录？\n            this._userId = 'guest_user';\n            this._userAccount = createEmptyUserAccount(this._userId);\n            director.emit(Constants.EventName.LOGIN_SUCCESS, this._userId); // 发送游客登录成功事件\n            return true; // 返回 true 表示流程完成（即使是游客）\n        }\n\n\n        console.log('[AccountManager] 开始登录流程...');\n        this._isLoggingIn = true;\n        this._isLoggedIn = false; // 重置登录状态\n\n        try {\n            // 1. 调用 wx.login 获取 code\n            const loginRes = await this.wxLogin();\n            if (!loginRes || !loginRes.code) {\n                throw new Error('wx.login 调用失败或未返回 code。');\n            }\n            const code = loginRes.code;\n            console.log('[AccountManager] wx.login 成功, code:', code);\n\n            // 2. 调用 CloudService 进行认证\n            const authResult = await CloudService.authenticateUser(code);\n            this._userId = authResult.userId;\n            this._isNewUser = authResult.isNewUser;\n            console.log(`[AccountManager] 云端认证成功, userId: ${this._userId}, isNewUser: ${this._isNewUser}`);\n\n            // 3. (可选) 如果是新用户，可能需要创建基础账户信息 (云函数内部可能已处理)\n            // if (this._isNewUser) {\n            //     console.log('[AccountManager] 新用户，尝试在数据库创建账户...');\n            //     // 可以调用 CloudService.upsertUserAccountToDB 或特定云函数\n            // }\n\n            // 4. 获取用户账户信息 (包含关卡记录等)\n            console.log('[AccountManager] 获取用户账户信息...');\n            this._userAccount = await this.fetchUserAccountData(); // 从云端获取\n\n            this._isLoggedIn = true;\n            console.log('[AccountManager] 登录成功！');\n            director.emit(Constants.EventName.LOGIN_SUCCESS, this._userId); // 发送登录成功事件\n\n            // (可选) 登录成功后，可以尝试获取用户昵称和头像信息\n            // this.tryFetchWxUserInfo();\n\n            return true;\n\n        } catch (err) {\n            error('[AccountManager] 登录流程失败:', err);\n            this._isLoggedIn = false;\n            this._userId = null;\n            this._userAccount = null;\n            director.emit(Constants.EventName.LOGIN_FAIL); // 发送登录失败事件\n            return false;\n        } finally {\n            this._isLoggingIn = false;\n        }\n    }\n\n    /**\n     * 获取当前用户的登录状态。\n     */\n    public isLoggedIn(): boolean {\n        return this._isLoggedIn;\n    }\n\n    /**\n     * 获取当前用户的 User ID (openid)。\n     * @returns 返回用户 ID，如果未登录则返回 null。\n     */\n    public getUserId(): string | null {\n        return this._userId;\n    }\n\n    /**\n     * 获取当前用户的账户信息 (包含关卡记录等)。\n     * @returns 返回 UserAccount 对象，如果未登录或未获取到则返回 null。\n     */\n    public getUserAccount(): UserAccount | null {\n        return this._userAccount;\n    }\n\n    /**\n     * 获取当前用户指定关卡的记录。\n     * @param difficulty 难度\n     * @param levelIndex 关卡序号\n     * @returns 返回 LevelRecord，如果无记录则返回 null。\n     */\n    public getLevelRecord(difficulty: DifficultyType, levelIndex: number): LevelRecord | null {\n        if (!this._userAccount || !this._userAccount.levelRecords) {\n            return null;\n        }\n        const key = generateLevelRecordKey(difficulty, levelIndex);\n        return this._userAccount.levelRecords[key] || null;\n    }\n\n     /**\n     * 获取当前用户所有已完成的关卡记录。\n     * @returns 返回 LevelRecord 数组。\n     */\n    public getAllLevelRecords(): LevelRecord[] {\n        if (!this._userAccount || !this._userAccount.levelRecords) {\n            return [];\n        }\n        return Object.values(this._userAccount.levelRecords);\n    }\n\n\n    /**\n     * 保存用户完成关卡的结果到云端。\n     * @param difficulty 难度。\n     * @param levelIndex 关卡序号。\n     * @param timeSeconds 完成用时 (秒)。\n     * @returns Promise<boolean> 保存是否成功。\n     */\n    public async saveLevelResult(difficulty: DifficultyType, levelIndex: number, timeSeconds: number): Promise<boolean> {\n        if (!this._isLoggedIn || !this._userId) {\n            warn('[AccountManager] 用户未登录，无法保存关卡结果。');\n            // 可以考虑本地缓存，登录后上传\n            return false;\n        }\n        if (!this._isInitialized) {\n             warn('[AccountManager] saveLevelResult 在初始化之前被调用。');\n             return false;\n        }\n\n        console.log(`[AccountManager] 保存关卡结果: ${difficulty}-${levelIndex}, time=${timeSeconds}s`);\n        const completionTimestamp = Date.now(); // 使用客户端时间戳\n\n        try {\n            // 调用 CloudService 更新记录\n            await CloudService.updateUserRecord(\n                this._userId,\n                difficulty,\n                levelIndex,\n                timeSeconds,\n                completionTimestamp\n            );\n\n            // --- 更新本地缓存的用户账户信息 ---\n            if (this._userAccount) {\n                const key = generateLevelRecordKey(difficulty, levelIndex);\n                const existingRecord = this._userAccount.levelRecords[key];\n                let isNewCompletion = false;\n\n                if (existingRecord) {\n                    // 更新最佳时间\n                    if (timeSeconds < existingRecord.bestTimeSeconds) {\n                        console.log(`[AccountManager] 新的最佳时间记录: ${timeSeconds}s (原: ${existingRecord.bestTimeSeconds}s)`);\n                        existingRecord.bestTimeSeconds = timeSeconds;\n                        // 可以考虑更新完成时间戳，或只记录首次完成时间\n                    }\n                } else {\n                    // 新完成的关卡\n                    console.log(`[AccountManager] 首次完成关卡: ${difficulty}-${levelIndex}`);\n                    this._userAccount.levelRecords[key] = {\n                        difficulty: difficulty,\n                        levelIndex: levelIndex,\n                        bestTimeSeconds: timeSeconds,\n                        firstCompletionTimestamp: completionTimestamp\n                    };\n                    this._userAccount.totalLevelsCompleted = (this._userAccount.totalLevelsCompleted || 0) + 1;\n                    isNewCompletion = true;\n                }\n                 // 通知 UI 可能需要更新 (例如，如果记录界面是打开的)\n                 director.emit(Constants.EventName.USER_RECORDS_UPDATED, this.getAllLevelRecords());\n            } else {\n                 // 如果本地缓存不存在，可以选择重新拉取或标记为需要刷新\n                 warn('[AccountManager] 用户账户本地缓存不存在，无法立即更新。将在下次登录时同步。');\n            }\n\n            return true;\n        } catch (err) {\n            error('[AccountManager] 保存关卡结果失败:', err);\n            return false;\n        }\n    }\n\n    // --- 私有辅助方法 ---\n\n    /**\n     * 封装 wx.login 的 Promise 调用。\n     */\n    private wxLogin(): Promise<WxLoginSuccessResult | null> {\n        return new Promise((resolve) => {\n            wx.login({\n                success: (res: WxLoginSuccessResult) => {\n                    resolve(res);\n                },\n                fail: (err: WxLoginErrorResult) => {\n                    error('[AccountManager] wx.login fail:', err);\n                    resolve(null); // 失败时 resolve null\n                }\n            });\n        });\n    }\n\n    /**\n     * 从云端获取用户账户数据 (包含记录)。\n     * @returns 返回 UserAccount 对象，如果获取失败或用户不存在则返回一个空的 UserAccount。\n     */\n    private async fetchUserAccountData(): Promise<UserAccount> {\n        if (!this._userId) {\n             error('[AccountManager] 无法获取用户账户数据：userId 为空。');\n             return createEmptyUserAccount('unknown_user'); // 返回空账户\n        }\n        try {\n            // 方式一：调用特定云函数获取整合后的 UserAccount\n            const recordsMap = await CloudService.fetchUserRecords(this._userId);\n            // 需要从其他地方获取 totalLevelsCompleted, nickname, avatarUrl 等信息\n            // 或者 fetchUserRecords 云函数直接返回完整的 UserAccount 结构\n\n            // 假设 fetchUserRecords 返回的就是记录 Map\n            const account = createEmptyUserAccount(this._userId);\n            account.levelRecords = recordsMap;\n            account.totalLevelsCompleted = Object.keys(recordsMap).length;\n            // TODO: 获取昵称、头像等其他信息 (如果需要)\n\n            console.log('[AccountManager] 从云端获取用户账户数据成功。');\n            return account;\n\n            // 方式二：直接从数据库读取 (如果权限允许且结构简单)\n            /*\n            const account = await CloudService.fetchUserAccountFromDB(this._userId);\n            if (account) {\n                console.log('[AccountManager] 从数据库获取用户账户数据成功。');\n                return account;\n            } else {\n                 console.log('[AccountManager] 数据库中未找到用户账户，返回空账户。');\n                 return createEmptyUserAccount(this._userId);\n            }\n            */\n\n        } catch (err) {\n            error('[AccountManager] 获取用户账户数据失败:', err);\n            // 返回一个空账户，避免后续逻辑出错\n            return createEmptyUserAccount(this._userId);\n        }\n    }\n\n\n    // --- (可选) 获取微信用户昵称和头像 ---\n    /**\n     * 尝试获取并更新用户的微信昵称和头像。\n     * 注意：这通常需要用户通过按钮点击触发授权 (wx.getUserProfile)。\n     *       静默获取方式 (wx.getUserInfo) 已不推荐或废弃。\n     *       这里仅作示例，实际实现需要 UI 按钮配合。\n     */\n    public async tryFetchWxUserInfo(): Promise<boolean> {\n        if (!this._isLoggedIn || !sys.platform.toLowerCase().includes('wechat')) {\n            warn('[AccountManager] 用户未登录或非微信平台，无法获取用户信息。');\n            return false;\n        }\n        if (this._userAccount && this._userAccount.nickname && this._userAccount.avatarUrl) {\n             console.log('[AccountManager] 用户昵称和头像已存在，跳过获取。');\n             return true; // 已有信息\n        }\n\n        console.log('[AccountManager] 尝试获取微信用户信息 (需要用户授权)...');\n\n        // --- 使用 wx.getUserProfile (推荐方式，需要按钮触发) ---\n        return new Promise((resolve) => {\n            wx.getUserProfile({\n                desc: '用于完善用户信息及排行榜展示', // 声明获取用户个人信息后的用途，后续会展示在弹窗中，请谨慎填写\n                success: (res: WxGetUserInfoSuccessResult) => {\n                    console.log('[AccountManager] wx.getUserProfile 成功:', res.userInfo);\n                    const { nickName, avatarUrl } = res.userInfo;\n                    // 更新本地缓存\n                    if (this._userAccount) {\n                        this._userAccount.nickname = nickName;\n                        this._userAccount.avatarUrl = avatarUrl;\n                    }\n                    // TODO: 将获取到的昵称和头像信息上传到云端保存\n                    // 例如调用一个 updateUserProfile 云函数\n                    // CloudService.updateUserProfile(this._userId, nickName, avatarUrl);\n                    resolve(true);\n                },\n                fail: (err: WxGetUserInfoErrorResult) => {\n                    error('[AccountManager] wx.getUserProfile 失败:', err);\n                    // 用户拒绝授权或发生错误\n                    resolve(false);\n                }\n            });\n        });\n\n        // --- 使用 wx.getUserInfo (旧方式，可能需要授权设置) ---\n        /*\n        return new Promise((resolve) => {\n            wx.getUserInfo({\n                success: (res: WxGetUserInfoSuccessResult) => {\n                    console.log('[AccountManager] wx.getUserInfo 成功:', res.userInfo);\n                    // ... 更新逻辑同上 ...\n                    resolve(true);\n                },\n                fail: (err: WxGetUserInfoErrorResult) => {\n                    error('[AccountManager] wx.getUserInfo 失败:', err);\n                    // 可能需要引导用户去设置页开启授权\n                    resolve(false);\n                }\n            });\n        });\n        */\n    }\n}\n\n// --- 在 Constants.ts 中补充事件名 ---\n/*\n// assets/scripts/utils/Constants.ts\nexport const Constants = {\n    // ...\n    EventName: {\n        // ...\n        LOGIN_SUCCESS: 'event_login_success',         // 登录成功 (userId: string)\n        LOGIN_FAIL: 'event_login_fail',             // 登录失败\n        USER_RECORDS_UPDATED: 'event_user_records_updated', // 用户记录已更新 (records: LevelRecord[])\n        // ...\n    }\n    // ...\n};\n*/\n\n/*\nSingleton & Persistence: 同样使用了单例模式和持久化节点。\n依赖 CloudService: 依赖 CloudService 来执行所有与云端的交互。\n状态管理:\n_isLoggingIn: 防止并发登录请求。\n_isLoggedIn: 标记用户是否已成功登录。\n_userId: 存储用户的 openid。\n_userAccount: 缓存从云端获取的完整用户账户信息（包括 levelRecords）。\n_isNewUser: 标记本次登录是否是新用户。\n登录流程 (login):\n包含了状态检查（是否已登录、是否正在登录、是否微信平台）。\n调用 wxLogin 获取 code。\n调用 CloudService.authenticateUser 进行认证，获取 userId 和 isNewUser 状态。\n调用 fetchUserAccountData 从云端拉取用户的详细信息（主要是关卡记录）。\n更新内部状态并发出 LOGIN_SUCCESS 或 LOGIN_FAIL 事件。\n包含了错误处理。\n数据获取接口:\nisLoggedIn, getUserId, getUserAccount: 提供获取当前状态和数据的接口。\ngetLevelRecord, getAllLevelRecords: 方便地从缓存的 _userAccount 中获取特定或全部关卡记录。\n保存结果 (saveLevelResult):\n检查登录状态。\n调用 CloudService.updateUserRecord 将结果上传到云端。\n重要: 在云端保存成功后，同步更新本地缓存的 _userAccount 信息（包括最佳时间和总完成数），这样 UI 可以立即反映最新数据，而不需要重新从服务器拉取。\n发出 USER_RECORDS_UPDATED 事件，通知其他模块（如 UIManager）数据已更新。\n微信 API 封装: wxLogin 方法将回调式的 wx.login 封装成了 Promise，使 async/await 语法更流畅。\n获取账户数据 (fetchUserAccountData): 封装了从云端获取用户数据的逻辑，优先考虑调用云函数获取整合后的数据，并处理了获取失败或用户不存在的情况（返回空账户对象）。\n获取微信用户信息 (tryFetchWxUserInfo) (可选): 演示了如何使用 wx.getUserProfile（推荐方式，需要按钮触发）来获取用户昵称和头像。获取后需要调用云服务将信息保存到用户账户中。此功能需要 UI 配合（例如，在排行榜或个人资料页添加一个授权按钮）。\n常量补充: 提示了需要在 Constants.ts 中添加新的事件名。\n*/"]}